

Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Sun Aug 30 03:50:35 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000D                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  001D                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0087                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  008F                     	;# 
    78  0090                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0093                     	;# 
    83  0093                     	;# 
    84  0094                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  0105                     	;# 
    97  0107                     	;# 
    98  0108                     	;# 
    99  0109                     	;# 
   100  010C                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  0185                     	;# 
   106  0187                     	;# 
   107  0188                     	;# 
   108  0189                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  008F                     	;# 
   154  0090                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0093                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  0105                     	;# 
   173  0107                     	;# 
   174  0108                     	;# 
   175  0109                     	;# 
   176  010C                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  0185                     	;# 
   182  0187                     	;# 
   183  0188                     	;# 
   184  0189                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  0000                     	;# 
   188  0001                     	;# 
   189  0002                     	;# 
   190  0003                     	;# 
   191  0004                     	;# 
   192  0005                     	;# 
   193  0006                     	;# 
   194  0007                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  000E                     	;# 
   202  000F                     	;# 
   203  0010                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0013                     	;# 
   207  0014                     	;# 
   208  0015                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0017                     	;# 
   212  0018                     	;# 
   213  0019                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  0086                     	;# 
   224  0087                     	;# 
   225  0089                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  008F                     	;# 
   230  0090                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0094                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  0105                     	;# 
   249  0107                     	;# 
   250  0108                     	;# 
   251  0109                     	;# 
   252  010C                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  010F                     	;# 
   257  0185                     	;# 
   258  0187                     	;# 
   259  0188                     	;# 
   260  0189                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  000E                     	;# 
   278  000F                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0014                     	;# 
   284  0015                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  001D                     	;# 
   295  001E                     	;# 
   296  001F                     	;# 
   297  0081                     	;# 
   298  0085                     	;# 
   299  0086                     	;# 
   300  0087                     	;# 
   301  0089                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  008F                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0093                     	;# 
   310  0093                     	;# 
   311  0093                     	;# 
   312  0094                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0098                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  0105                     	;# 
   325  0107                     	;# 
   326  0108                     	;# 
   327  0109                     	;# 
   328  010C                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  010F                     	;# 
   333  0185                     	;# 
   334  0187                     	;# 
   335  0188                     	;# 
   336  0189                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000E                     	;# 
   354  000F                     	;# 
   355  0010                     	;# 
   356  0011                     	;# 
   357  0012                     	;# 
   358  0013                     	;# 
   359  0014                     	;# 
   360  0015                     	;# 
   361  0015                     	;# 
   362  0016                     	;# 
   363  0017                     	;# 
   364  0018                     	;# 
   365  0019                     	;# 
   366  001A                     	;# 
   367  001B                     	;# 
   368  001B                     	;# 
   369  001C                     	;# 
   370  001D                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  0081                     	;# 
   374  0085                     	;# 
   375  0086                     	;# 
   376  0087                     	;# 
   377  0089                     	;# 
   378  008C                     	;# 
   379  008D                     	;# 
   380  008E                     	;# 
   381  008F                     	;# 
   382  0090                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  0105                     	;# 
   401  0107                     	;# 
   402  0108                     	;# 
   403  0109                     	;# 
   404  010C                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  0185                     	;# 
   410  0187                     	;# 
   411  0188                     	;# 
   412  0189                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415                           
   416                           	psect	nvCOMMON
   417  007A                     __pnvCOMMON:	
   418  007A                     _ECU_ID:	
   419  007A                     	ds	1
   420  001F                     _ADCON0	set	31
   421  000C                     _PIR1bits	set	12
   422  000D                     _PIR2bits	set	13
   423  001A                     _RCREG	set	26
   424  0013                     _SSPBUF	set	19
   425  0014                     _SSPCON	set	20
   426  0019                     _TXREG	set	25
   427  00C4                     _CREN	set	196
   428  005F                     _GIE	set	95
   429  005E                     _PEIE	set	94
   430  0038                     _RC0	set	56
   431  0065                     _RCIF	set	101
   432  00C7                     _SPEN	set	199
   433  0099                     _SPBRG	set	153
   434  0093                     _SSPADD	set	147
   435  0091                     _SSPCON2	set	145
   436  0094                     _SSPSTAT	set	148
   437  0085                     _TRISA	set	133
   438  0087                     _TRISCbits	set	135
   439  048D                     _ACKDT	set	1165
   440  048C                     _ACKEN	set	1164
   441  04A0                     _BF	set	1184
   442  04C2                     _BRGH	set	1218
   443  048A                     _PEN	set	1162
   444  048B                     _RCEN	set	1163
   445  0465                     _RCIE	set	1125
   446  0489                     _RSEN	set	1161
   447  0488                     _SEN	set	1160
   448  04C4                     _SYNC	set	1220
   449  0438                     _TRISC0	set	1080
   450  043E                     _TRISC6	set	1086
   451  043F                     _TRISC7	set	1087
   452  04C1                     _TRMT	set	1217
   453  04C5                     _TXEN	set	1221
   454  0188                     _ANSEL	set	392
   455                           
   456                           ; #config settings
   457  0000                     
   458                           	psect	cinit
   459  0011                     start_initialization:	
   460  0011                     __initialization:	
   461                           
   462                           ; Clear objects allocated to COMMON
   463  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   464                           
   465                           ; Clear objects allocated to BANK0
   466  0012  01DB               	clrf	__pbssBANK0& (0+127)
   467  0013  01DC               	clrf	(__pbssBANK0+1)& (0+127)
   468  0014  01DD               	clrf	(__pbssBANK0+2)& (0+127)
   469  0015  01DE               	clrf	(__pbssBANK0+3)& (0+127)
   470  0016  01DF               	clrf	(__pbssBANK0+4)& (0+127)
   471  0017  01E0               	clrf	(__pbssBANK0+5)& (0+127)
   472  0018  01E1               	clrf	(__pbssBANK0+6)& (0+127)
   473  0019  01E2               	clrf	(__pbssBANK0+7)& (0+127)
   474  001A  01E3               	clrf	(__pbssBANK0+8)& (0+127)
   475  001B                     end_of_initialization:	
   476                           ;End of C runtime variable initialization code
   477                           
   478  001B                     __end_of__initialization:	
   479  001B  0183               	clrf	3
   480  001C  281D               	ljmp	_main	;jump to C main() function
   481                           
   482                           	psect	bssCOMMON
   483  007B                     __pbssCOMMON:	
   484  007B                     _RECEIVED_ECU_ID:	
   485  007B                     	ds	1
   486                           
   487                           	psect	bssBANK0
   488  005B                     __pbssBANK0:	
   489  005B                     _Data_Buffer:	
   490  005B                     	ds	9
   491                           
   492                           	psect	cstackCOMMON
   493  0070                     __pcstackCOMMON:	
   494  0070                     ?_UART_vidInit:	
   495  0070                     ?_I2CInit:	
   496                           ; 0 bytes @ 0x0
   497                           
   498  0070                     ?_ini_adxl345:	
   499                           ; 0 bytes @ 0x0
   500                           
   501  0070                     ?_I2CStart:	
   502                           ; 0 bytes @ 0x0
   503                           
   504  0070                     ?_I2CSend:	
   505                           ; 0 bytes @ 0x0
   506                           
   507  0070                     ?_I2CRestart:	
   508                           ; 0 bytes @ 0x0
   509                           
   510  0070                     ?_I2CAck:	
   511                           ; 0 bytes @ 0x0
   512                           
   513  0070                     ?_I2CNak:	
   514                           ; 0 bytes @ 0x0
   515                           
   516  0070                     ?_I2CStop:	
   517                           ; 0 bytes @ 0x0
   518                           
   519  0070                     ?_RS845_ManageState:	
   520                           ; 0 bytes @ 0x0
   521                           
   522  0070                     ?_UART_vidSend:	
   523                           ; 0 bytes @ 0x0
   524                           
   525  0070                     ?_UART_Write:	
   526                           ; 0 bytes @ 0x0
   527                           
   528  0070                     ?_system_init:	
   529                           ; 0 bytes @ 0x0
   530                           
   531  0070                     ?_main:	
   532                           ; 0 bytes @ 0x0
   533                           
   534  0070                     ?_UART_vidNewDataReceived:	
   535                           ; 0 bytes @ 0x0
   536                           
   537  0070                     ?_I2CWait:	
   538                           ; 0 bytes @ 0x0
   539                           
   540  0070                     ?_I2CRead:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  0070                     ?_UART_u8GetNodeID:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     UART_vidSend@Len:	
   547                           ; 1 bytes @ 0x0
   548                           
   549                           
   550                           ; 2 bytes @ 0x0
   551  0070                     	ds	2
   552  0072                     ??_UART_vidSend:	
   553                           
   554                           ; 0 bytes @ 0x2
   555  0072                     	ds	1
   556  0073                     UART_vidSend@data:	
   557                           
   558                           ; 1 bytes @ 0x3
   559  0073                     	ds	1
   560  0074                     UART_vidSend@UART_u16Index:	
   561                           
   562                           ; 2 bytes @ 0x4
   563  0074                     	ds	2
   564  0076                     ??_RS845_ManageState:	
   565  0076                     ??_UART_vidNewDataReceived:	
   566                           ; 0 bytes @ 0x6
   567                           
   568                           
   569                           ; 0 bytes @ 0x6
   570  0076                     	ds	4
   571                           
   572                           	psect	cstackBANK0
   573  0020                     __pcstackBANK0:	
   574  0020                     ??_UART_vidInit:	
   575  0020                     ??_I2CInit:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0020                     ??_I2CStart:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0020                     ??_I2CSend:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0020                     ??_I2CRestart:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0020                     ??_I2CRead:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0020                     ??_I2CAck:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0020                     ??_I2CNak:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0020                     ??_I2CStop:	
   597                           ; 0 bytes @ 0x0
   598                           
   599  0020                     ??_UART_u8GetNodeID:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0020                     ??_UART_Write:	
   603                           ; 0 bytes @ 0x0
   604                           
   605  0020                     ??_system_init:	
   606                           ; 0 bytes @ 0x0
   607                           
   608  0020                     ??_I2CWait:	
   609                           ; 0 bytes @ 0x0
   610                           
   611  0020                     ?_get_x_average:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0020                     ?_get_y_average:	
   615                           ; 4 bytes @ 0x0
   616                           
   617  0020                     ?_get_z_average:	
   618                           ; 4 bytes @ 0x0
   619                           
   620  0020                     UART_Write@data:	
   621                           ; 4 bytes @ 0x0
   622                           
   623  0020                     I2CSend@dat:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0020                     get_x_average@x:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0020                     get_y_average@y:	
   630                           ; 4 bytes @ 0x0
   631                           
   632  0020                     get_z_average@z:	
   633                           ; 4 bytes @ 0x0
   634                           
   635                           
   636                           ; 4 bytes @ 0x0
   637  0020                     	ds	1
   638  0021                     ?_E_Write:	
   639  0021                     I2CRead@temp:	
   640                           ; 1 bytes @ 0x1
   641                           
   642  0021                     E_Write@addr:	
   643                           ; 1 bytes @ 0x1
   644                           
   645                           
   646                           ; 2 bytes @ 0x1
   647  0021                     	ds	1
   648  0022                     ?_E_Read:	
   649  0022                     E_Read@addr:	
   650                           ; 1 bytes @ 0x2
   651                           
   652                           
   653                           ; 2 bytes @ 0x2
   654  0022                     	ds	1
   655  0023                     E_Write@ch:	
   656                           
   657                           ; 1 bytes @ 0x3
   658  0023                     	ds	1
   659  0024                     ??_ini_adxl345:	
   660  0024                     ??_E_Read:	
   661                           ; 0 bytes @ 0x4
   662                           
   663  0024                     ??_get_x_average:	
   664                           ; 0 bytes @ 0x4
   665                           
   666  0024                     ??_get_y_average:	
   667                           ; 0 bytes @ 0x4
   668                           
   669  0024                     ??_get_z_average:	
   670                           ; 0 bytes @ 0x4
   671                           
   672  0024                     ??_E_Write:	
   673                           ; 0 bytes @ 0x4
   674                           
   675                           
   676                           ; 0 bytes @ 0x4
   677  0024                     	ds	1
   678  0025                     E_Read@ch:	
   679                           
   680                           ; 1 bytes @ 0x5
   681  0025                     	ds	1
   682  0026                     ??_main:	
   683                           
   684                           ; 0 bytes @ 0x6
   685  0026                     	ds	8
   686  002E                     main@Xaverage:	
   687                           
   688                           ; 1 bytes @ 0xE
   689  002E                     	ds	1
   690  002F                     main@Yaverage:	
   691                           
   692                           ; 1 bytes @ 0xF
   693  002F                     	ds	1
   694  0030                     main@Zaverage:	
   695                           
   696                           ; 1 bytes @ 0x10
   697  0030                     	ds	1
   698  0031                     main@xhi:	
   699                           
   700                           ; 4 bytes @ 0x11
   701  0031                     	ds	4
   702  0035                     main@xlo:	
   703                           
   704                           ; 4 bytes @ 0x15
   705  0035                     	ds	4
   706  0039                     main@yhi:	
   707                           
   708                           ; 4 bytes @ 0x19
   709  0039                     	ds	4
   710  003D                     main@ylo:	
   711                           
   712                           ; 4 bytes @ 0x1D
   713  003D                     	ds	4
   714  0041                     main@zhi:	
   715                           
   716                           ; 4 bytes @ 0x21
   717  0041                     	ds	4
   718  0045                     main@zlo:	
   719                           
   720                           ; 4 bytes @ 0x25
   721  0045                     	ds	4
   722  0049                     main@id:	
   723                           
   724                           ; 2 bytes @ 0x29
   725  0049                     	ds	2
   726  004B                     main@pow:	
   727                           
   728                           ; 2 bytes @ 0x2B
   729  004B                     	ds	2
   730  004D                     main@bw_rate:	
   731                           
   732                           ; 2 bytes @ 0x2D
   733  004D                     	ds	2
   734  004F                     main@Xaccumulate:	
   735                           
   736                           ; 4 bytes @ 0x2F
   737  004F                     	ds	4
   738  0053                     main@Yaccumulate:	
   739                           
   740                           ; 4 bytes @ 0x33
   741  0053                     	ds	4
   742  0057                     main@Zaccumulate:	
   743                           
   744                           ; 4 bytes @ 0x37
   745  0057                     	ds	4
   746                           
   747                           	psect	maintext
   748  001D                     __pmaintext:	
   749 ;;
   750 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   751 ;;
   752 ;; *************** function _main *****************
   753 ;; Defined at:
   754 ;;		line 40 in file "main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  Zaccumulate     4   55[BANK0 ] long 
   759 ;;  Yaccumulate     4   51[BANK0 ] long 
   760 ;;  Xaccumulate     4   47[BANK0 ] long 
   761 ;;  zlo             4   37[BANK0 ] long 
   762 ;;  zhi             4   33[BANK0 ] long 
   763 ;;  ylo             4   29[BANK0 ] long 
   764 ;;  yhi             4   25[BANK0 ] long 
   765 ;;  xlo             4   21[BANK0 ] long 
   766 ;;  xhi             4   17[BANK0 ] long 
   767 ;;  z               4    0        long 
   768 ;;  y               4    0        long 
   769 ;;  x               4    0        long 
   770 ;;  bw_rate         2   45[BANK0 ] int 
   771 ;;  pow             2   43[BANK0 ] int 
   772 ;;  id              2   41[BANK0 ] int 
   773 ;;  i               2    0        int 
   774 ;;  Zaverage        1   16[BANK0 ] unsigned char 
   775 ;;  Yaverage        1   15[BANK0 ] unsigned char 
   776 ;;  Xaverage        1   14[BANK0 ] unsigned char 
   777 ;; Return value:  Size  Location     Type
   778 ;;		None               void
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 17F/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1
   786 ;;      Params:         0       0       0
   787 ;;      Locals:         0      45       0
   788 ;;      Temps:          0       8       0
   789 ;;      Totals:         0      53       0
   790 ;;Total ram usage:       53 bytes
   791 ;; Hardware stack levels required when called:    7
   792 ;; This function calls:
   793 ;;		_E_Read
   794 ;;		_I2CAck
   795 ;;		_I2CInit
   796 ;;		_I2CNak
   797 ;;		_I2CRead
   798 ;;		_I2CRestart
   799 ;;		_I2CSend
   800 ;;		_I2CStart
   801 ;;		_I2CStop
   802 ;;		_UART_Write
   803 ;;		_UART_vidInit
   804 ;;		_get_x_average
   805 ;;		_get_y_average
   806 ;;		_get_z_average
   807 ;;		_ini_adxl345
   808 ;;		_system_init
   809 ;; This function is called by:
   810 ;;		Startup code after reset
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _main
   816  001D                     _main:	
   817                           
   818                           ;main.c: 42: int id, pow, bw_rate;
   819                           ;main.c: 43: signed long x,y,z;
   820                           ;main.c: 44: signed long xhi,xlo,yhi,ylo,zhi,zlo;
   821                           ;main.c: 45: signed long Xaccumulate, Yaccumulate, Zaccumulate;
   822                           ;main.c: 46: unsigned char Xaverage, Yaverage, Zaverage;
   823                           ;main.c: 47: int i;
   824                           ;main.c: 57: system_init();
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _main: [allreg]
   828  001D  2310               	fcall	_system_init
   829                           
   830                           ;main.c: 58: UART_vidInit();
   831  001E  228D               	fcall	_UART_vidInit
   832                           
   833                           ;main.c: 61: I2CInit();
   834  001F  22D3               	fcall	_I2CInit
   835                           
   836                           ;main.c: 63: ini_adxl345();
   837  0020  2214               	fcall	_ini_adxl345
   838                           
   839                           ;main.c: 65: id = E_Read(0);
   840  0021  3000               	movlw	0
   841  0022  1283               	bcf	3,5	;RP0=0, select bank0
   842  0023  1303               	bcf	3,6	;RP1=0, select bank0
   843  0024  00A2               	movwf	E_Read@addr
   844  0025  3000               	movlw	0
   845  0026  00A3               	movwf	E_Read@addr+1
   846  0027  22A8               	fcall	_E_Read
   847  0028  1283               	bcf	3,5	;RP0=0, select bank0
   848  0029  1303               	bcf	3,6	;RP1=0, select bank0
   849  002A  00A6               	movwf	??_main
   850  002B  01A7               	clrf	??_main+1
   851  002C  0826               	movf	??_main,w
   852  002D  00C9               	movwf	main@id
   853  002E  0827               	movf	??_main+1,w
   854  002F  00CA               	movwf	main@id+1
   855                           
   856                           ;main.c: 66: UART_Write(id);
   857  0030  0849               	movf	main@id,w
   858  0031  231C               	fcall	_UART_Write
   859                           
   860                           ;main.c: 67: _delay((unsigned long)((10)*(20000000/4000.0)));
   861  0032  3041               	movlw	65
   862  0033  1283               	bcf	3,5	;RP0=0, select bank0
   863  0034  1303               	bcf	3,6	;RP1=0, select bank0
   864  0035  00A7               	movwf	??_main+1
   865  0036  30EE               	movlw	238
   866  0037  00A6               	movwf	??_main
   867  0038                     u517:	
   868  0038  0BA6               	decfsz	??_main,f
   869  0039  2838               	goto	u517
   870  003A  0BA7               	decfsz	??_main+1,f
   871  003B  2838               	goto	u517
   872  003C  0000               	nop
   873                           
   874                           ;main.c: 68: pow = E_Read(0x2D);
   875  003D  302D               	movlw	45
   876  003E  1283               	bcf	3,5	;RP0=0, select bank0
   877  003F  1303               	bcf	3,6	;RP1=0, select bank0
   878  0040  00A2               	movwf	E_Read@addr
   879  0041  3000               	movlw	0
   880  0042  00A3               	movwf	E_Read@addr+1
   881  0043  22A8               	fcall	_E_Read
   882  0044  1283               	bcf	3,5	;RP0=0, select bank0
   883  0045  1303               	bcf	3,6	;RP1=0, select bank0
   884  0046  00A6               	movwf	??_main
   885  0047  01A7               	clrf	??_main+1
   886  0048  0826               	movf	??_main,w
   887  0049  00CB               	movwf	main@pow
   888  004A  0827               	movf	??_main+1,w
   889  004B  00CC               	movwf	main@pow+1
   890                           
   891                           ;main.c: 69: UART_Write(pow);
   892  004C  084B               	movf	main@pow,w
   893  004D  231C               	fcall	_UART_Write
   894                           
   895                           ;main.c: 70: _delay((unsigned long)((10)*(20000000/4000.0)));
   896  004E  3041               	movlw	65
   897  004F  1283               	bcf	3,5	;RP0=0, select bank0
   898  0050  1303               	bcf	3,6	;RP1=0, select bank0
   899  0051  00A7               	movwf	??_main+1
   900  0052  30EE               	movlw	238
   901  0053  00A6               	movwf	??_main
   902  0054                     u527:	
   903  0054  0BA6               	decfsz	??_main,f
   904  0055  2854               	goto	u527
   905  0056  0BA7               	decfsz	??_main+1,f
   906  0057  2854               	goto	u527
   907  0058  0000               	nop
   908                           
   909                           ;main.c: 71: bw_rate = E_Read(0x2C);
   910  0059  302C               	movlw	44
   911  005A  1283               	bcf	3,5	;RP0=0, select bank0
   912  005B  1303               	bcf	3,6	;RP1=0, select bank0
   913  005C  00A2               	movwf	E_Read@addr
   914  005D  3000               	movlw	0
   915  005E  00A3               	movwf	E_Read@addr+1
   916  005F  22A8               	fcall	_E_Read
   917  0060  1283               	bcf	3,5	;RP0=0, select bank0
   918  0061  1303               	bcf	3,6	;RP1=0, select bank0
   919  0062  00A6               	movwf	??_main
   920  0063  01A7               	clrf	??_main+1
   921  0064  0826               	movf	??_main,w
   922  0065  00CD               	movwf	main@bw_rate
   923  0066  0827               	movf	??_main+1,w
   924  0067  00CE               	movwf	main@bw_rate+1
   925                           
   926                           ;main.c: 72: UART_Write(bw_rate);
   927  0068  084D               	movf	main@bw_rate,w
   928  0069  231C               	fcall	_UART_Write
   929  006A                     l979:	
   930                           ;main.c: 75: while(1)
   931                           
   932                           
   933                           ;main.c: 76: {
   934                           ;main.c: 77: Xaccumulate = Yaccumulate = Zaccumulate = 0;
   935  006A  3000               	movlw	0
   936  006B  1283               	bcf	3,5	;RP0=0, select bank0
   937  006C  1303               	bcf	3,6	;RP1=0, select bank0
   938  006D  00DA               	movwf	main@Zaccumulate+3
   939  006E  3000               	movlw	0
   940  006F  00D9               	movwf	main@Zaccumulate+2
   941  0070  3000               	movlw	0
   942  0071  00D8               	movwf	main@Zaccumulate+1
   943  0072  3000               	movlw	0
   944  0073  00D7               	movwf	main@Zaccumulate
   945  0074  085A               	movf	main@Zaccumulate+3,w
   946  0075  00D6               	movwf	main@Yaccumulate+3
   947  0076  0859               	movf	main@Zaccumulate+2,w
   948  0077  00D5               	movwf	main@Yaccumulate+2
   949  0078  0858               	movf	main@Zaccumulate+1,w
   950  0079  00D4               	movwf	main@Yaccumulate+1
   951  007A  0857               	movf	main@Zaccumulate,w
   952  007B  00D3               	movwf	main@Yaccumulate
   953  007C  0856               	movf	main@Yaccumulate+3,w
   954  007D  00D2               	movwf	main@Xaccumulate+3
   955  007E  0855               	movf	main@Yaccumulate+2,w
   956  007F  00D1               	movwf	main@Xaccumulate+2
   957  0080  0854               	movf	main@Yaccumulate+1,w
   958  0081  00D0               	movwf	main@Xaccumulate+1
   959  0082  0853               	movf	main@Yaccumulate,w
   960  0083  00CF               	movwf	main@Xaccumulate
   961                           
   962                           ;main.c: 81: I2CStart();
   963  0084  234F               	fcall	_I2CStart
   964                           
   965                           ;main.c: 82: I2CSend(0xA6);
   966  0085  30A6               	movlw	166
   967  0086  2328               	fcall	_I2CSend
   968                           
   969                           ;main.c: 83: I2CSend(50);
   970  0087  3032               	movlw	50
   971  0088  2328               	fcall	_I2CSend
   972                           
   973                           ;main.c: 84: I2CRestart();
   974  0089  2355               	fcall	_I2CRestart
   975                           
   976                           ;main.c: 85: I2CSend(0xA7);
   977  008A  30A7               	movlw	167
   978  008B  2328               	fcall	_I2CSend
   979                           
   980                           ;main.c: 86: xlo = I2CRead();
   981  008C  22E6               	fcall	_I2CRead
   982  008D  1283               	bcf	3,5	;RP0=0, select bank0
   983  008E  1303               	bcf	3,6	;RP1=0, select bank0
   984  008F  00A6               	movwf	??_main
   985  0090  01A7               	clrf	??_main+1
   986  0091  01A8               	clrf	??_main+2
   987  0092  01A9               	clrf	??_main+3
   988  0093  0829               	movf	??_main+3,w
   989  0094  00B8               	movwf	main@xlo+3
   990  0095  0828               	movf	??_main+2,w
   991  0096  00B7               	movwf	main@xlo+2
   992  0097  0827               	movf	??_main+1,w
   993  0098  00B6               	movwf	main@xlo+1
   994  0099  0826               	movf	??_main,w
   995  009A  00B5               	movwf	main@xlo
   996                           
   997                           ;main.c: 87: I2CAck();
   998  009B  233B               	fcall	_I2CAck
   999                           
  1000                           ;main.c: 88: xhi = I2CRead();
  1001  009C  22E6               	fcall	_I2CRead
  1002  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1003  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1004  009F  00A6               	movwf	??_main
  1005  00A0  01A7               	clrf	??_main+1
  1006  00A1  01A8               	clrf	??_main+2
  1007  00A2  01A9               	clrf	??_main+3
  1008  00A3  0829               	movf	??_main+3,w
  1009  00A4  00B4               	movwf	main@xhi+3
  1010  00A5  0828               	movf	??_main+2,w
  1011  00A6  00B3               	movwf	main@xhi+2
  1012  00A7  0827               	movf	??_main+1,w
  1013  00A8  00B2               	movwf	main@xhi+1
  1014  00A9  0826               	movf	??_main,w
  1015  00AA  00B1               	movwf	main@xhi
  1016                           
  1017                           ;main.c: 89: I2CAck();
  1018  00AB  233B               	fcall	_I2CAck
  1019                           
  1020                           ;main.c: 90: ylo = I2CRead();
  1021  00AC  22E6               	fcall	_I2CRead
  1022  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1023  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1024  00AF  00A6               	movwf	??_main
  1025  00B0  01A7               	clrf	??_main+1
  1026  00B1  01A8               	clrf	??_main+2
  1027  00B2  01A9               	clrf	??_main+3
  1028  00B3  0829               	movf	??_main+3,w
  1029  00B4  00C0               	movwf	main@ylo+3
  1030  00B5  0828               	movf	??_main+2,w
  1031  00B6  00BF               	movwf	main@ylo+2
  1032  00B7  0827               	movf	??_main+1,w
  1033  00B8  00BE               	movwf	main@ylo+1
  1034  00B9  0826               	movf	??_main,w
  1035  00BA  00BD               	movwf	main@ylo
  1036                           
  1037                           ;main.c: 91: I2CAck();
  1038  00BB  233B               	fcall	_I2CAck
  1039                           
  1040                           ;main.c: 92: yhi = I2CRead();
  1041  00BC  22E6               	fcall	_I2CRead
  1042  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1043  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1044  00BF  00A6               	movwf	??_main
  1045  00C0  01A7               	clrf	??_main+1
  1046  00C1  01A8               	clrf	??_main+2
  1047  00C2  01A9               	clrf	??_main+3
  1048  00C3  0829               	movf	??_main+3,w
  1049  00C4  00BC               	movwf	main@yhi+3
  1050  00C5  0828               	movf	??_main+2,w
  1051  00C6  00BB               	movwf	main@yhi+2
  1052  00C7  0827               	movf	??_main+1,w
  1053  00C8  00BA               	movwf	main@yhi+1
  1054  00C9  0826               	movf	??_main,w
  1055  00CA  00B9               	movwf	main@yhi
  1056                           
  1057                           ;main.c: 93: I2CAck();
  1058  00CB  233B               	fcall	_I2CAck
  1059                           
  1060                           ;main.c: 94: zlo = I2CRead();
  1061  00CC  22E6               	fcall	_I2CRead
  1062  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1063  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1064  00CF  00A6               	movwf	??_main
  1065  00D0  01A7               	clrf	??_main+1
  1066  00D1  01A8               	clrf	??_main+2
  1067  00D2  01A9               	clrf	??_main+3
  1068  00D3  0829               	movf	??_main+3,w
  1069  00D4  00C8               	movwf	main@zlo+3
  1070  00D5  0828               	movf	??_main+2,w
  1071  00D6  00C7               	movwf	main@zlo+2
  1072  00D7  0827               	movf	??_main+1,w
  1073  00D8  00C6               	movwf	main@zlo+1
  1074  00D9  0826               	movf	??_main,w
  1075  00DA  00C5               	movwf	main@zlo
  1076                           
  1077                           ;main.c: 95: I2CAck();
  1078  00DB  233B               	fcall	_I2CAck
  1079                           
  1080                           ;main.c: 96: zhi = I2CRead();
  1081  00DC  22E6               	fcall	_I2CRead
  1082  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1083  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1084  00DF  00A6               	movwf	??_main
  1085  00E0  01A7               	clrf	??_main+1
  1086  00E1  01A8               	clrf	??_main+2
  1087  00E2  01A9               	clrf	??_main+3
  1088  00E3  0829               	movf	??_main+3,w
  1089  00E4  00C4               	movwf	main@zhi+3
  1090  00E5  0828               	movf	??_main+2,w
  1091  00E6  00C3               	movwf	main@zhi+2
  1092  00E7  0827               	movf	??_main+1,w
  1093  00E8  00C2               	movwf	main@zhi+1
  1094  00E9  0826               	movf	??_main,w
  1095  00EA  00C1               	movwf	main@zhi
  1096                           
  1097                           ;main.c: 97: I2CNak();
  1098  00EB  2342               	fcall	_I2CNak
  1099                           
  1100                           ;main.c: 98: I2CStop();
  1101  00EC  2349               	fcall	_I2CStop
  1102                           
  1103                           ;main.c: 101: Xaccumulate += ((xhi<<8) | xlo);
  1104  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1105  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1106  00EF  0835               	movf	main@xlo,w
  1107  00F0  00A6               	movwf	??_main
  1108  00F1  0836               	movf	main@xlo+1,w
  1109  00F2  00A7               	movwf	??_main+1
  1110  00F3  0837               	movf	main@xlo+2,w
  1111  00F4  00A8               	movwf	??_main+2
  1112  00F5  0838               	movf	main@xlo+3,w
  1113  00F6  00A9               	movwf	??_main+3
  1114  00F7  0831               	movf	main@xhi,w
  1115  00F8  00AA               	movwf	??_main+4
  1116  00F9  0832               	movf	main@xhi+1,w
  1117  00FA  00AB               	movwf	??_main+5
  1118  00FB  0833               	movf	main@xhi+2,w
  1119  00FC  00AC               	movwf	??_main+6
  1120  00FD  0834               	movf	main@xhi+3,w
  1121  00FE  00AD               	movwf	??_main+7
  1122  00FF  3008               	movlw	8
  1123  0100                     u285:	
  1124  0100  1003               	clrc
  1125  0101  0DAA               	rlf	??_main+4,f
  1126  0102  0DAB               	rlf	??_main+5,f
  1127  0103  0DAC               	rlf	??_main+6,f
  1128  0104  0DAD               	rlf	??_main+7,f
  1129  0105  3EFF               	addlw	-1
  1130  0106  1D03               	skipz
  1131  0107  2900               	goto	u285
  1132  0108  082A               	movf	??_main+4,w
  1133  0109  04A6               	iorwf	??_main,f
  1134  010A  082B               	movf	??_main+5,w
  1135  010B  04A7               	iorwf	??_main+1,f
  1136  010C  082C               	movf	??_main+6,w
  1137  010D  04A8               	iorwf	??_main+2,f
  1138  010E  082D               	movf	??_main+7,w
  1139  010F  04A9               	iorwf	??_main+3,f
  1140  0110  0826               	movf	??_main,w
  1141  0111  07CF               	addwf	main@Xaccumulate,f
  1142  0112  0827               	movf	??_main+1,w
  1143  0113  1103               	clrz
  1144  0114  1803               	skipnc
  1145  0115  3E01               	addlw	1
  1146  0116  1D03               	btfss	3,2
  1147  0117  07D0               	addwf	main@Xaccumulate+1,f
  1148  0118  0828               	movf	??_main+2,w
  1149  0119  1103               	clrz
  1150  011A  1803               	skipnc
  1151  011B  3E01               	addlw	1
  1152  011C  1D03               	btfss	3,2
  1153  011D  07D1               	addwf	main@Xaccumulate+2,f
  1154  011E  0829               	movf	??_main+3,w
  1155  011F  1103               	clrz
  1156  0120  1803               	skipnc
  1157  0121  3E01               	addlw	1
  1158  0122  1D03               	btfss	3,2
  1159  0123  07D2               	addwf	main@Xaccumulate+3,f
  1160                           
  1161                           ;main.c: 102: Yaccumulate += ((yhi<<8) | ylo);
  1162  0124  083D               	movf	main@ylo,w
  1163  0125  00A6               	movwf	??_main
  1164  0126  083E               	movf	main@ylo+1,w
  1165  0127  00A7               	movwf	??_main+1
  1166  0128  083F               	movf	main@ylo+2,w
  1167  0129  00A8               	movwf	??_main+2
  1168  012A  0840               	movf	main@ylo+3,w
  1169  012B  00A9               	movwf	??_main+3
  1170  012C  0839               	movf	main@yhi,w
  1171  012D  00AA               	movwf	??_main+4
  1172  012E  083A               	movf	main@yhi+1,w
  1173  012F  00AB               	movwf	??_main+5
  1174  0130  083B               	movf	main@yhi+2,w
  1175  0131  00AC               	movwf	??_main+6
  1176  0132  083C               	movf	main@yhi+3,w
  1177  0133  00AD               	movwf	??_main+7
  1178  0134  3008               	movlw	8
  1179  0135                     u305:	
  1180  0135  1003               	clrc
  1181  0136  0DAA               	rlf	??_main+4,f
  1182  0137  0DAB               	rlf	??_main+5,f
  1183  0138  0DAC               	rlf	??_main+6,f
  1184  0139  0DAD               	rlf	??_main+7,f
  1185  013A  3EFF               	addlw	-1
  1186  013B  1D03               	skipz
  1187  013C  2935               	goto	u305
  1188  013D  082A               	movf	??_main+4,w
  1189  013E  04A6               	iorwf	??_main,f
  1190  013F  082B               	movf	??_main+5,w
  1191  0140  04A7               	iorwf	??_main+1,f
  1192  0141  082C               	movf	??_main+6,w
  1193  0142  04A8               	iorwf	??_main+2,f
  1194  0143  082D               	movf	??_main+7,w
  1195  0144  04A9               	iorwf	??_main+3,f
  1196  0145  0826               	movf	??_main,w
  1197  0146  07D3               	addwf	main@Yaccumulate,f
  1198  0147  0827               	movf	??_main+1,w
  1199  0148  1103               	clrz
  1200  0149  1803               	skipnc
  1201  014A  3E01               	addlw	1
  1202  014B  1D03               	btfss	3,2
  1203  014C  07D4               	addwf	main@Yaccumulate+1,f
  1204  014D  0828               	movf	??_main+2,w
  1205  014E  1103               	clrz
  1206  014F  1803               	skipnc
  1207  0150  3E01               	addlw	1
  1208  0151  1D03               	btfss	3,2
  1209  0152  07D5               	addwf	main@Yaccumulate+2,f
  1210  0153  0829               	movf	??_main+3,w
  1211  0154  1103               	clrz
  1212  0155  1803               	skipnc
  1213  0156  3E01               	addlw	1
  1214  0157  1D03               	btfss	3,2
  1215  0158  07D6               	addwf	main@Yaccumulate+3,f
  1216                           
  1217                           ;main.c: 103: Zaccumulate += ((zhi<<8) | zlo);
  1218  0159  0845               	movf	main@zlo,w
  1219  015A  00A6               	movwf	??_main
  1220  015B  0846               	movf	main@zlo+1,w
  1221  015C  00A7               	movwf	??_main+1
  1222  015D  0847               	movf	main@zlo+2,w
  1223  015E  00A8               	movwf	??_main+2
  1224  015F  0848               	movf	main@zlo+3,w
  1225  0160  00A9               	movwf	??_main+3
  1226  0161  0841               	movf	main@zhi,w
  1227  0162  00AA               	movwf	??_main+4
  1228  0163  0842               	movf	main@zhi+1,w
  1229  0164  00AB               	movwf	??_main+5
  1230  0165  0843               	movf	main@zhi+2,w
  1231  0166  00AC               	movwf	??_main+6
  1232  0167  0844               	movf	main@zhi+3,w
  1233  0168  00AD               	movwf	??_main+7
  1234  0169  3008               	movlw	8
  1235  016A                     u325:	
  1236  016A  1003               	clrc
  1237  016B  0DAA               	rlf	??_main+4,f
  1238  016C  0DAB               	rlf	??_main+5,f
  1239  016D  0DAC               	rlf	??_main+6,f
  1240  016E  0DAD               	rlf	??_main+7,f
  1241  016F  3EFF               	addlw	-1
  1242  0170  1D03               	skipz
  1243  0171  296A               	goto	u325
  1244  0172  082A               	movf	??_main+4,w
  1245  0173  04A6               	iorwf	??_main,f
  1246  0174  082B               	movf	??_main+5,w
  1247  0175  04A7               	iorwf	??_main+1,f
  1248  0176  082C               	movf	??_main+6,w
  1249  0177  04A8               	iorwf	??_main+2,f
  1250  0178  082D               	movf	??_main+7,w
  1251  0179  04A9               	iorwf	??_main+3,f
  1252  017A  0826               	movf	??_main,w
  1253  017B  07D7               	addwf	main@Zaccumulate,f
  1254  017C  0827               	movf	??_main+1,w
  1255  017D  1103               	clrz
  1256  017E  1803               	skipnc
  1257  017F  3E01               	addlw	1
  1258  0180  1D03               	btfss	3,2
  1259  0181  07D8               	addwf	main@Zaccumulate+1,f
  1260  0182  0828               	movf	??_main+2,w
  1261  0183  1103               	clrz
  1262  0184  1803               	skipnc
  1263  0185  3E01               	addlw	1
  1264  0186  1D03               	btfss	3,2
  1265  0187  07D9               	addwf	main@Zaccumulate+2,f
  1266  0188  0829               	movf	??_main+3,w
  1267  0189  1103               	clrz
  1268  018A  1803               	skipnc
  1269  018B  3E01               	addlw	1
  1270  018C  1D03               	btfss	3,2
  1271  018D  07DA               	addwf	main@Zaccumulate+3,f
  1272                           
  1273                           ;main.c: 107: Xaverage = get_x_average(Xaccumulate);
  1274  018E  0852               	movf	main@Xaccumulate+3,w
  1275  018F  00A3               	movwf	get_x_average@x+3
  1276  0190  0851               	movf	main@Xaccumulate+2,w
  1277  0191  00A2               	movwf	get_x_average@x+2
  1278  0192  0850               	movf	main@Xaccumulate+1,w
  1279  0193  00A1               	movwf	get_x_average@x+1
  1280  0194  084F               	movf	main@Xaccumulate,w
  1281  0195  00A0               	movwf	get_x_average@x
  1282  0196  235F               	fcall	_get_x_average
  1283  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0199  0820               	movf	?_get_x_average,w
  1286  019A  00A6               	movwf	??_main
  1287  019B  0826               	movf	??_main,w
  1288  019C  00AE               	movwf	main@Xaverage
  1289                           
  1290                           ;main.c: 108: Yaverage = get_y_average(Yaccumulate);
  1291  019D  0856               	movf	main@Yaccumulate+3,w
  1292  019E  00A3               	movwf	get_y_average@y+3
  1293  019F  0855               	movf	main@Yaccumulate+2,w
  1294  01A0  00A2               	movwf	get_y_average@y+2
  1295  01A1  0854               	movf	main@Yaccumulate+1,w
  1296  01A2  00A1               	movwf	get_y_average@y+1
  1297  01A3  0853               	movf	main@Yaccumulate,w
  1298  01A4  00A0               	movwf	get_y_average@y
  1299  01A5  235E               	fcall	_get_y_average
  1300  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1301  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1302  01A8  0820               	movf	?_get_y_average,w
  1303  01A9  00A6               	movwf	??_main
  1304  01AA  0826               	movf	??_main,w
  1305  01AB  00AF               	movwf	main@Yaverage
  1306                           
  1307                           ;main.c: 109: Zaverage = get_z_average(Zaccumulate);
  1308  01AC  085A               	movf	main@Zaccumulate+3,w
  1309  01AD  00A3               	movwf	get_z_average@z+3
  1310  01AE  0859               	movf	main@Zaccumulate+2,w
  1311  01AF  00A2               	movwf	get_z_average@z+2
  1312  01B0  0858               	movf	main@Zaccumulate+1,w
  1313  01B1  00A1               	movwf	get_z_average@z+1
  1314  01B2  0857               	movf	main@Zaccumulate,w
  1315  01B3  00A0               	movwf	get_z_average@z
  1316  01B4  235D               	fcall	_get_z_average
  1317  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1318  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1319  01B7  0820               	movf	?_get_z_average,w
  1320  01B8  00A6               	movwf	??_main
  1321  01B9  0826               	movf	??_main,w
  1322  01BA  00B0               	movwf	main@Zaverage
  1323                           
  1324                           ;main.c: 119: {Data_Buffer.HX = (Xaccumulate>>8);Data_Buffer.LX= (Xaccumulate);}
  1325  01BB  084F               	movf	main@Xaccumulate,w
  1326  01BC  00A6               	movwf	??_main
  1327  01BD  0850               	movf	main@Xaccumulate+1,w
  1328  01BE  00A7               	movwf	??_main+1
  1329  01BF  0851               	movf	main@Xaccumulate+2,w
  1330  01C0  00A8               	movwf	??_main+2
  1331  01C1  0852               	movf	main@Xaccumulate+3,w
  1332  01C2  00A9               	movwf	??_main+3
  1333  01C3  3008               	movlw	8
  1334  01C4  00AA               	movwf	??_main+4
  1335  01C5                     u345:	
  1336  01C5  0D29               	rlf	??_main+3,w
  1337  01C6  0CA9               	rrf	??_main+3,f
  1338  01C7  0CA8               	rrf	??_main+2,f
  1339  01C8  0CA7               	rrf	??_main+1,f
  1340  01C9  0CA6               	rrf	??_main,f
  1341  01CA  0BAA               	decfsz	??_main+4,f
  1342  01CB  29C5               	goto	u345
  1343  01CC  0826               	movf	??_main,w
  1344  01CD  00AB               	movwf	??_main+5
  1345  01CE  082B               	movf	??_main+5,w
  1346  01CF  00DF               	movwf	_Data_Buffer+4
  1347  01D0  084F               	movf	main@Xaccumulate,w
  1348  01D1  00A6               	movwf	??_main
  1349  01D2  0826               	movf	??_main,w
  1350  01D3  00DE               	movwf	_Data_Buffer+3
  1351                           
  1352                           ;main.c: 120: {Data_Buffer.HY = (Yaccumulate>>8);Data_Buffer.LY= (Yaccumulate);};
  1353  01D4  0853               	movf	main@Yaccumulate,w
  1354  01D5  00A6               	movwf	??_main
  1355  01D6  0854               	movf	main@Yaccumulate+1,w
  1356  01D7  00A7               	movwf	??_main+1
  1357  01D8  0855               	movf	main@Yaccumulate+2,w
  1358  01D9  00A8               	movwf	??_main+2
  1359  01DA  0856               	movf	main@Yaccumulate+3,w
  1360  01DB  00A9               	movwf	??_main+3
  1361  01DC  3008               	movlw	8
  1362  01DD  00AA               	movwf	??_main+4
  1363  01DE                     u355:	
  1364  01DE  0D29               	rlf	??_main+3,w
  1365  01DF  0CA9               	rrf	??_main+3,f
  1366  01E0  0CA8               	rrf	??_main+2,f
  1367  01E1  0CA7               	rrf	??_main+1,f
  1368  01E2  0CA6               	rrf	??_main,f
  1369  01E3  0BAA               	decfsz	??_main+4,f
  1370  01E4  29DE               	goto	u355
  1371  01E5  0826               	movf	??_main,w
  1372  01E6  00AB               	movwf	??_main+5
  1373  01E7  082B               	movf	??_main+5,w
  1374  01E8  00E1               	movwf	_Data_Buffer+6
  1375  01E9  0853               	movf	main@Yaccumulate,w
  1376  01EA  00A6               	movwf	??_main
  1377  01EB  0826               	movf	??_main,w
  1378  01EC  00E0               	movwf	_Data_Buffer+5
  1379                           
  1380                           ;main.c: 121: {Data_Buffer.HZ = (Zaccumulate>>8);Data_Buffer.LZ= (Zaccumulate);};
  1381  01ED  0857               	movf	main@Zaccumulate,w
  1382  01EE  00A6               	movwf	??_main
  1383  01EF  0858               	movf	main@Zaccumulate+1,w
  1384  01F0  00A7               	movwf	??_main+1
  1385  01F1  0859               	movf	main@Zaccumulate+2,w
  1386  01F2  00A8               	movwf	??_main+2
  1387  01F3  085A               	movf	main@Zaccumulate+3,w
  1388  01F4  00A9               	movwf	??_main+3
  1389  01F5  3008               	movlw	8
  1390  01F6  00AA               	movwf	??_main+4
  1391  01F7                     u365:	
  1392  01F7  0D29               	rlf	??_main+3,w
  1393  01F8  0CA9               	rrf	??_main+3,f
  1394  01F9  0CA8               	rrf	??_main+2,f
  1395  01FA  0CA7               	rrf	??_main+1,f
  1396  01FB  0CA6               	rrf	??_main,f
  1397  01FC  0BAA               	decfsz	??_main+4,f
  1398  01FD  29F7               	goto	u365
  1399  01FE  0826               	movf	??_main,w
  1400  01FF  00AB               	movwf	??_main+5
  1401  0200  082B               	movf	??_main+5,w
  1402  0201  00E3               	movwf	_Data_Buffer+8
  1403  0202  0857               	movf	main@Zaccumulate,w
  1404  0203  00A6               	movwf	??_main
  1405  0204  0826               	movf	??_main,w
  1406  0205  00E2               	movwf	_Data_Buffer+7
  1407                           
  1408                           ;main.c: 122: (Data_Buffer.T = 0x66);
  1409  0206  3066               	movlw	102
  1410  0207  00A6               	movwf	??_main
  1411  0208  0826               	movf	??_main,w
  1412  0209  00DD               	movwf	_Data_Buffer+2
  1413                           
  1414                           ;main.c: 123: (Data_Buffer.SwitchStatus = 1);
  1415  020A  17DB               	bsf	_Data_Buffer,7
  1416                           
  1417                           ;main.c: 124: (Data_Buffer.ID = 0x35);
  1418  020B  085B               	movf	_Data_Buffer,w
  1419  020C  3980               	andlw	-128
  1420  020D  3835               	iorlw	53
  1421  020E  00DB               	movwf	_Data_Buffer
  1422                           
  1423                           ;main.c: 125: (Data_Buffer.AVG_Vibration = 0x30);
  1424  020F  085C               	movf	_Data_Buffer+1,w
  1425  0210  3900               	andlw	-256
  1426  0211  3830               	iorlw	48
  1427  0212  00DC               	movwf	_Data_Buffer+1
  1428  0213  286A               	goto	l979
  1429  0214                     __end_of_main:	
  1430                           
  1431                           	psect	text1
  1432  0310                     __ptext1:	
  1433 ;; *************** function _system_init *****************
  1434 ;; Defined at:
  1435 ;;		line 31 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;		None
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;		None
  1440 ;; Return value:  Size  Location     Type
  1441 ;;		None               void
  1442 ;; Registers used:
  1443 ;;		wreg, status,2
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMMON   BANK0   BANK1
  1449 ;;      Params:         0       0       0
  1450 ;;      Locals:         0       0       0
  1451 ;;      Temps:          0       0       0
  1452 ;;      Totals:         0       0       0
  1453 ;;Total ram usage:        0 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    3
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           
  1464                           ;psect for function _system_init
  1465  0310                     _system_init:	
  1466                           
  1467                           ;main.c: 33: TRISC0 = 0;
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _system_init: [wreg+status,2]
  1471  0310  1683               	bsf	3,5	;RP0=1, select bank1
  1472  0311  1303               	bcf	3,6	;RP1=0, select bank1
  1473  0312  1007               	bcf	7,0	;volatile
  1474                           
  1475                           ;main.c: 34: TRISA = 0xFF;
  1476  0313  30FF               	movlw	255
  1477  0314  0085               	movwf	5	;volatile
  1478                           
  1479                           ;main.c: 35: ADCON0 = 0x00;
  1480  0315  1283               	bcf	3,5	;RP0=0, select bank0
  1481  0316  1303               	bcf	3,6	;RP1=0, select bank0
  1482  0317  019F               	clrf	31	;volatile
  1483                           
  1484                           ;main.c: 36: ANSEL = 0x00;
  1485  0318  1683               	bsf	3,5	;RP0=1, select bank3
  1486  0319  1703               	bsf	3,6	;RP1=1, select bank3
  1487  031A  0188               	clrf	8	;volatile
  1488  031B  0008               	return
  1489  031C                     __end_of_system_init:	
  1490                           
  1491                           	psect	text2
  1492  0214                     __ptext2:	
  1493 ;; *************** function _ini_adxl345 *****************
  1494 ;; Defined at:
  1495 ;;		line 5 in file "ADXL_m.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;		None               void
  1502 ;; Registers used:
  1503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1
  1509 ;;      Params:         0       0       0
  1510 ;;      Locals:         0       0       0
  1511 ;;      Temps:          0       2       0
  1512 ;;      Totals:         0       2       0
  1513 ;;Total ram usage:        2 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    6
  1516 ;; This function calls:
  1517 ;;		_E_Write
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           
  1524                           ;psect for function _ini_adxl345
  1525  0214                     _ini_adxl345:	
  1526                           
  1527                           ;ADXL_m.c: 7: E_Write(56,0x9f);
  1528                           
  1529                           ;incstack = 0
  1530                           ; Regs used in _ini_adxl345: [allreg]
  1531  0214  3038               	movlw	56
  1532  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0217  00A1               	movwf	E_Write@addr
  1535  0218  3000               	movlw	0
  1536  0219  00A2               	movwf	E_Write@addr+1
  1537  021A  309F               	movlw	159
  1538  021B  00A4               	movwf	??_ini_adxl345
  1539  021C  0824               	movf	??_ini_adxl345,w
  1540  021D  00A3               	movwf	E_Write@ch
  1541  021E  22F6               	fcall	_E_Write
  1542                           
  1543                           ;ADXL_m.c: 8: _delay((unsigned long)((10)*(20000000/4000.0)));
  1544  021F  3041               	movlw	65
  1545  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0222  00A5               	movwf	??_ini_adxl345+1
  1548  0223  30EE               	movlw	238
  1549  0224  00A4               	movwf	??_ini_adxl345
  1550  0225                     u537:	
  1551  0225  0BA4               	decfsz	??_ini_adxl345,f
  1552  0226  2A25               	goto	u537
  1553  0227  0BA5               	decfsz	??_ini_adxl345+1,f
  1554  0228  2A25               	goto	u537
  1555  0229  0000               	nop
  1556                           
  1557                           ;ADXL_m.c: 9: E_Write(49,0x09);
  1558  022A  3031               	movlw	49
  1559  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1560  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1561  022D  00A1               	movwf	E_Write@addr
  1562  022E  3000               	movlw	0
  1563  022F  00A2               	movwf	E_Write@addr+1
  1564  0230  3009               	movlw	9
  1565  0231  00A4               	movwf	??_ini_adxl345
  1566  0232  0824               	movf	??_ini_adxl345,w
  1567  0233  00A3               	movwf	E_Write@ch
  1568  0234  22F6               	fcall	_E_Write
  1569                           
  1570                           ;ADXL_m.c: 10: _delay((unsigned long)((10)*(20000000/4000.0)));
  1571  0235  3041               	movlw	65
  1572  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0238  00A5               	movwf	??_ini_adxl345+1
  1575  0239  30EE               	movlw	238
  1576  023A  00A4               	movwf	??_ini_adxl345
  1577  023B                     u547:	
  1578  023B  0BA4               	decfsz	??_ini_adxl345,f
  1579  023C  2A3B               	goto	u547
  1580  023D  0BA5               	decfsz	??_ini_adxl345+1,f
  1581  023E  2A3B               	goto	u547
  1582  023F  0000               	nop
  1583                           
  1584                           ;ADXL_m.c: 11: E_Write(44,0x0d);
  1585  0240  302C               	movlw	44
  1586  0241  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0242  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0243  00A1               	movwf	E_Write@addr
  1589  0244  3000               	movlw	0
  1590  0245  00A2               	movwf	E_Write@addr+1
  1591  0246  300D               	movlw	13
  1592  0247  00A4               	movwf	??_ini_adxl345
  1593  0248  0824               	movf	??_ini_adxl345,w
  1594  0249  00A3               	movwf	E_Write@ch
  1595  024A  22F6               	fcall	_E_Write
  1596                           
  1597                           ;ADXL_m.c: 12: _delay((unsigned long)((10)*(20000000/4000.0)));
  1598  024B  3041               	movlw	65
  1599  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1600  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1601  024E  00A5               	movwf	??_ini_adxl345+1
  1602  024F  30EE               	movlw	238
  1603  0250  00A4               	movwf	??_ini_adxl345
  1604  0251                     u557:	
  1605  0251  0BA4               	decfsz	??_ini_adxl345,f
  1606  0252  2A51               	goto	u557
  1607  0253  0BA5               	decfsz	??_ini_adxl345+1,f
  1608  0254  2A51               	goto	u557
  1609  0255  0000               	nop
  1610                           
  1611                           ;ADXL_m.c: 13: E_Write(45,0x08);
  1612  0256  302D               	movlw	45
  1613  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1614  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1615  0259  00A1               	movwf	E_Write@addr
  1616  025A  3000               	movlw	0
  1617  025B  00A2               	movwf	E_Write@addr+1
  1618  025C  3008               	movlw	8
  1619  025D  00A4               	movwf	??_ini_adxl345
  1620  025E  0824               	movf	??_ini_adxl345,w
  1621  025F  00A3               	movwf	E_Write@ch
  1622  0260  22F6               	fcall	_E_Write
  1623  0261  0008               	return
  1624  0262                     __end_of_ini_adxl345:	
  1625                           
  1626                           	psect	text3
  1627  02F6                     __ptext3:	
  1628 ;; *************** function _E_Write *****************
  1629 ;; Defined at:
  1630 ;;		line 153 in file "ADXL_m.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  addr            2    1[BANK0 ] int 
  1633 ;;  ch              1    3[BANK0 ] unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      unsigned char 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, pclath, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1
  1645 ;;      Params:         0       3       0
  1646 ;;      Locals:         0       0       0
  1647 ;;      Temps:          0       0       0
  1648 ;;      Totals:         0       3       0
  1649 ;;Total ram usage:        3 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    5
  1652 ;; This function calls:
  1653 ;;		_I2CSend
  1654 ;;		_I2CStart
  1655 ;;		_I2CStop
  1656 ;; This function is called by:
  1657 ;;		_ini_adxl345
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function _E_Write
  1663  02F6                     _E_Write:	
  1664                           
  1665                           ;ADXL_m.c: 156: I2CStart();
  1666                           
  1667                           ;incstack = 0
  1668                           ; Regs used in _E_Write: [wreg+status,2+status,0+pclath+cstack]
  1669  02F6  234F               	fcall	_I2CStart
  1670                           
  1671                           ;ADXL_m.c: 158: I2CSend(0xA6);
  1672  02F7  30A6               	movlw	166
  1673  02F8  2328               	fcall	_I2CSend
  1674                           
  1675                           ;ADXL_m.c: 160: I2CSend(addr);
  1676  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1677  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1678  02FB  0821               	movf	E_Write@addr,w
  1679  02FC  2328               	fcall	_I2CSend
  1680                           
  1681                           ;ADXL_m.c: 162: I2CSend(ch);
  1682  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1683  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1684  02FF  0823               	movf	E_Write@ch,w
  1685  0300  2328               	fcall	_I2CSend
  1686                           
  1687                           ;ADXL_m.c: 164: I2CStop();
  1688  0301  2349               	fcall	_I2CStop
  1689  0302  0008               	return
  1690  0303                     __end_of_E_Write:	
  1691                           ;ADXL_m.c: 165: return 1;
  1692                           ;	Return value of _E_Write is never used
  1693                           
  1694                           
  1695                           	psect	text4
  1696  035D                     __ptext4:	
  1697 ;; *************** function _get_z_average *****************
  1698 ;; Defined at:
  1699 ;;		line 24 in file "average_calculations.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  z               4    0[BANK0 ] long 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;		None
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  4    0[BANK0 ] long 
  1706 ;; Registers used:
  1707 ;;		None
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1
  1713 ;;      Params:         0       4       0
  1714 ;;      Locals:         0       0       0
  1715 ;;      Temps:          0       0       0
  1716 ;;      Totals:         0       4       0
  1717 ;;Total ram usage:        4 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    3
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_main
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           
  1728                           ;psect for function _get_z_average
  1729  035D                     _get_z_average:	
  1730                           
  1731                           ;average_calculations.c: 26: return z;
  1732                           
  1733                           ;incstack = 0
  1734                           ; Regs used in _get_z_average: []
  1735  035D  0008               	return
  1736  035E                     __end_of_get_z_average:	
  1737                           
  1738                           	psect	text5
  1739  035E                     __ptext5:	
  1740 ;; *************** function _get_y_average *****************
  1741 ;; Defined at:
  1742 ;;		line 19 in file "average_calculations.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  y               4    0[BANK0 ] long 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  4    0[BANK0 ] long 
  1749 ;; Registers used:
  1750 ;;		None
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1
  1756 ;;      Params:         0       4       0
  1757 ;;      Locals:         0       0       0
  1758 ;;      Temps:          0       0       0
  1759 ;;      Totals:         0       4       0
  1760 ;;Total ram usage:        4 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    3
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _get_y_average
  1772  035E                     _get_y_average:	
  1773                           
  1774                           ;average_calculations.c: 21: return y;
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _get_y_average: []
  1778  035E  0008               	return
  1779  035F                     __end_of_get_y_average:	
  1780                           
  1781                           	psect	text6
  1782  035F                     __ptext6:	
  1783 ;; *************** function _get_x_average *****************
  1784 ;; Defined at:
  1785 ;;		line 13 in file "average_calculations.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  x               4    0[BANK0 ] long 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  4    0[BANK0 ] long 
  1792 ;; Registers used:
  1793 ;;		None
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1
  1799 ;;      Params:         0       4       0
  1800 ;;      Locals:         0       0       0
  1801 ;;      Temps:          0       0       0
  1802 ;;      Totals:         0       4       0
  1803 ;;Total ram usage:        4 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    3
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _get_x_average
  1815  035F                     _get_x_average:	
  1816                           
  1817                           ;average_calculations.c: 15: return x;
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _get_x_average: []
  1821  035F  0008               	return
  1822  0360                     __end_of_get_x_average:	
  1823                           
  1824                           	psect	text7
  1825  028D                     __ptext7:	
  1826 ;; *************** function _UART_vidInit *****************
  1827 ;; Defined at:
  1828 ;;		line 14 in file "UART_m.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;		None               void
  1835 ;; Registers used:
  1836 ;;		wreg, pclath, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1
  1842 ;;      Params:         0       0       0
  1843 ;;      Locals:         0       0       0
  1844 ;;      Temps:          0       1       0
  1845 ;;      Totals:         0       1       0
  1846 ;;Total ram usage:        1 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    4
  1849 ;; This function calls:
  1850 ;;		_UART_u8GetNodeID
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _UART_vidInit
  1858  028D                     _UART_vidInit:	
  1859                           
  1860                           ;UART_m.c: 16: BRGH = 0;
  1861                           
  1862                           ;incstack = 0
  1863                           ; Regs used in _UART_vidInit: [wreg+pclath+cstack]
  1864  028D  1683               	bsf	3,5	;RP0=1, select bank1
  1865  028E  1303               	bcf	3,6	;RP1=0, select bank1
  1866  028F  1118               	bcf	24,2	;volatile
  1867                           
  1868                           ;UART_m.c: 17: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  1869  0290  301F               	movlw	31
  1870  0291  0099               	movwf	25	;volatile
  1871                           
  1872                           ;UART_m.c: 18: SYNC = 0;
  1873  0292  1218               	bcf	24,4	;volatile
  1874                           
  1875                           ;UART_m.c: 19: SPEN = 1;
  1876  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0295  1798               	bsf	24,7	;volatile
  1879                           
  1880                           ;UART_m.c: 20: TRISC6 = 1;
  1881  0296  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0297  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0298  1707               	bsf	7,6	;volatile
  1884                           
  1885                           ;UART_m.c: 21: TRISC7 = 1;
  1886  0299  1787               	bsf	7,7	;volatile
  1887                           
  1888                           ;UART_m.c: 22: TXEN = 1;
  1889  029A  1698               	bsf	24,5	;volatile
  1890                           
  1891                           ;UART_m.c: 23: RCIE = 1;
  1892  029B  168C               	bsf	12,5	;volatile
  1893                           
  1894                           ;UART_m.c: 24: PEIE = 1;
  1895  029C  170B               	bsf	11,6	;volatile
  1896                           
  1897                           ;UART_m.c: 25: GIE = 1;
  1898  029D  178B               	bsf	11,7	;volatile
  1899                           
  1900                           ;UART_m.c: 26: CREN = 1;
  1901  029E  1283               	bcf	3,5	;RP0=0, select bank0
  1902  029F  1303               	bcf	3,6	;RP1=0, select bank0
  1903  02A0  1618               	bsf	24,4	;volatile
  1904                           
  1905                           ;UART_m.c: 28: ECU_ID = UART_u8GetNodeID();
  1906  02A1  235B               	fcall	_UART_u8GetNodeID
  1907  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1908  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1909  02A4  00A0               	movwf	??_UART_vidInit
  1910  02A5  0820               	movf	??_UART_vidInit,w
  1911  02A6  00FA               	movwf	_ECU_ID
  1912  02A7  0008               	return
  1913  02A8                     __end_of_UART_vidInit:	
  1914                           
  1915                           	psect	text8
  1916  035B                     __ptext8:	
  1917 ;; *************** function _UART_u8GetNodeID *****************
  1918 ;; Defined at:
  1919 ;;		line 70 in file "UART_m.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;		None
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      unsigned char 
  1926 ;; Registers used:
  1927 ;;		wreg
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1
  1933 ;;      Params:         0       0       0
  1934 ;;      Locals:         0       0       0
  1935 ;;      Temps:          0       0       0
  1936 ;;      Totals:         0       0       0
  1937 ;;Total ram usage:        0 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    3
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_UART_vidInit
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function _UART_u8GetNodeID
  1949  035B                     _UART_u8GetNodeID:	
  1950                           
  1951                           ;UART_m.c: 72: return 0x35;
  1952                           
  1953                           ;incstack = 0
  1954                           ; Regs used in _UART_u8GetNodeID: [wreg]
  1955  035B  3035               	movlw	53
  1956  035C  0008               	return
  1957  035D                     __end_of_UART_u8GetNodeID:	
  1958                           
  1959                           	psect	text9
  1960  031C                     __ptext9:	
  1961 ;; *************** function _UART_Write *****************
  1962 ;; Defined at:
  1963 ;;		line 16 in file "main.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  data            1    wreg     unsigned char 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  data            1    0[BANK0 ] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1
  1977 ;;      Params:         0       0       0
  1978 ;;      Locals:         0       1       0
  1979 ;;      Temps:          0       0       0
  1980 ;;      Totals:         0       1       0
  1981 ;;Total ram usage:        1 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    3
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;;		_UART_Write_String
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _UART_Write
  1994  031C                     _UART_Write:	
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in _UART_Write: [wreg]
  1998                           ;UART_Write@data stored from wreg
  1999  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2000  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2001  031E  00A0               	movwf	UART_Write@data
  2002  031F                     l49:	
  2003                           ;main.c: 18: while(!TRMT);
  2004                           
  2005  031F  1683               	bsf	3,5	;RP0=1, select bank1
  2006  0320  1303               	bcf	3,6	;RP1=0, select bank1
  2007  0321  1C98               	btfss	24,1	;volatile
  2008  0322  2B1F               	goto	l49
  2009                           
  2010                           ;main.c: 19: TXREG = data;
  2011  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0324  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0325  0820               	movf	UART_Write@data,w
  2014  0326  0099               	movwf	25	;volatile
  2015  0327  0008               	return
  2016  0328                     __end_of_UART_Write:	
  2017                           
  2018                           	psect	text10
  2019  02D3                     __ptext10:	
  2020 ;; *************** function _I2CInit *****************
  2021 ;; Defined at:
  2022 ;;		line 22 in file "ADXL_m.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;		None               void
  2029 ;; Registers used:
  2030 ;;		wreg, status,2
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1
  2036 ;;      Params:         0       0       0
  2037 ;;      Locals:         0       0       0
  2038 ;;      Temps:          0       0       0
  2039 ;;      Totals:         0       0       0
  2040 ;;Total ram usage:        0 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    3
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           
  2051                           ;psect for function _I2CInit
  2052  02D3                     _I2CInit:	
  2053                           
  2054                           ;ADXL_m.c: 24: TRISCbits.TRISC3 = 1;
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in _I2CInit: [wreg+status,2]
  2058  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  2059  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  2060  02D5  1587               	bsf	7,3	;volatile
  2061                           
  2062                           ;ADXL_m.c: 25: TRISCbits.TRISC4 = 1;
  2063  02D6  1607               	bsf	7,4	;volatile
  2064                           
  2065                           ;ADXL_m.c: 26: SSPSTAT |= 0x80;
  2066  02D7  1794               	bsf	20,7	;volatile
  2067                           
  2068                           ;ADXL_m.c: 27: SSPCON = 0x28;
  2069  02D8  3028               	movlw	40
  2070  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2071  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2072  02DB  0094               	movwf	20	;volatile
  2073                           
  2074                           ;ADXL_m.c: 29: SSPCON2 = 0x00;
  2075  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  2076  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  2077  02DE  0191               	clrf	17	;volatile
  2078                           
  2079                           ;ADXL_m.c: 30: SSPADD = 49;
  2080  02DF  3031               	movlw	49
  2081  02E0  0093               	movwf	19	;volatile
  2082                           
  2083                           ;ADXL_m.c: 31: PIR1bits.SSPIF = 0;
  2084  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2085  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2086  02E3  118C               	bcf	12,3	;volatile
  2087                           
  2088                           ;ADXL_m.c: 32: PIR2bits.BCLIF = 0;
  2089  02E4  118D               	bcf	13,3	;volatile
  2090  02E5  0008               	return
  2091  02E6                     __end_of_I2CInit:	
  2092                           
  2093                           	psect	text11
  2094  033B                     __ptext11:	
  2095 ;; *************** function _I2CAck *****************
  2096 ;; Defined at:
  2097 ;;		line 88 in file "ADXL_m.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;		None               void
  2104 ;; Registers used:
  2105 ;;		None
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1
  2111 ;;      Params:         0       0       0
  2112 ;;      Locals:         0       0       0
  2113 ;;      Temps:          0       0       0
  2114 ;;      Totals:         0       0       0
  2115 ;;Total ram usage:        0 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    3
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _I2CAck
  2127  033B                     _I2CAck:	
  2128                           
  2129                           ;ADXL_m.c: 90: ACKDT = 0;
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _I2CAck: []
  2133  033B  1683               	bsf	3,5	;RP0=1, select bank1
  2134  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2135  033D  1291               	bcf	17,5	;volatile
  2136                           
  2137                           ;ADXL_m.c: 91: ACKEN = 1;
  2138  033E  1611               	bsf	17,4	;volatile
  2139  033F                     l196:	
  2140                           ;ADXL_m.c: 92: while(ACKEN);
  2141                           
  2142  033F  1E11               	btfss	17,4	;volatile
  2143  0340  0008               	return
  2144  0341  2B3F               	goto	l196
  2145  0342                     __end_of_I2CAck:	
  2146                           
  2147                           	psect	text12
  2148  02A8                     __ptext12:	
  2149 ;; *************** function _E_Read *****************
  2150 ;; Defined at:
  2151 ;;		line 170 in file "ADXL_m.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  addr            2    2[BANK0 ] int 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  ch              1    5[BANK0 ] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      unsigned char 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1
  2165 ;;      Params:         0       2       0
  2166 ;;      Locals:         0       1       0
  2167 ;;      Temps:          0       1       0
  2168 ;;      Totals:         0       4       0
  2169 ;;Total ram usage:        4 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    5
  2172 ;; This function calls:
  2173 ;;		_I2CNak
  2174 ;;		_I2CRead
  2175 ;;		_I2CRestart
  2176 ;;		_I2CSend
  2177 ;;		_I2CStart
  2178 ;;		_I2CStop
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function _E_Read
  2186  02A8                     _E_Read:	
  2187                           
  2188                           ;ADXL_m.c: 172: unsigned char ch;
  2189                           ;ADXL_m.c: 174: I2CStart();
  2190                           
  2191                           ;incstack = 0
  2192                           ; Regs used in _E_Read: [allreg]
  2193  02A8  234F               	fcall	_I2CStart
  2194                           
  2195                           ;ADXL_m.c: 176: I2CSend(0xA6);
  2196  02A9  30A6               	movlw	166
  2197  02AA  2328               	fcall	_I2CSend
  2198                           
  2199                           ;ADXL_m.c: 178: I2CSend(addr);
  2200  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2201  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  2202  02AD  0822               	movf	E_Read@addr,w
  2203  02AE  2328               	fcall	_I2CSend
  2204                           
  2205                           ;ADXL_m.c: 180: I2CRestart();
  2206  02AF  2355               	fcall	_I2CRestart
  2207                           
  2208                           ;ADXL_m.c: 182: I2CSend(0xA7);
  2209  02B0  30A7               	movlw	167
  2210  02B1  2328               	fcall	_I2CSend
  2211                           
  2212                           ;ADXL_m.c: 184: ch = I2CRead();
  2213  02B2  22E6               	fcall	_I2CRead
  2214  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2215  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2216  02B5  00A4               	movwf	??_E_Read
  2217  02B6  0824               	movf	??_E_Read,w
  2218  02B7  00A5               	movwf	E_Read@ch
  2219                           
  2220                           ;ADXL_m.c: 185: I2CNak();
  2221  02B8  2342               	fcall	_I2CNak
  2222                           
  2223                           ;ADXL_m.c: 186: I2CStop();
  2224  02B9  2349               	fcall	_I2CStop
  2225                           
  2226                           ;ADXL_m.c: 187: return ch;
  2227  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2228  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2229  02BC  0825               	movf	E_Read@ch,w
  2230  02BD  0008               	return
  2231  02BE                     __end_of_E_Read:	
  2232                           
  2233                           	psect	text13
  2234  0349                     __ptext13:	
  2235 ;; *************** function _I2CStop *****************
  2236 ;; Defined at:
  2237 ;;		line 63 in file "ADXL_m.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;		None               void
  2244 ;; Registers used:
  2245 ;;		None
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1
  2251 ;;      Params:         0       0       0
  2252 ;;      Locals:         0       0       0
  2253 ;;      Temps:          0       0       0
  2254 ;;      Totals:         0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    3
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;;		_E_Write
  2263 ;;		_E_Read
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _I2CStop
  2269  0349                     _I2CStop:	
  2270                           
  2271                           ;ADXL_m.c: 65: PEN = 1;
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _I2CStop: []
  2275  0349  1683               	bsf	3,5	;RP0=1, select bank1
  2276  034A  1303               	bcf	3,6	;RP1=0, select bank1
  2277  034B  1511               	bsf	17,2	;volatile
  2278  034C                     l184:	
  2279                           ;ADXL_m.c: 66: while(PEN);
  2280                           
  2281  034C  1D11               	btfss	17,2	;volatile
  2282  034D  0008               	return
  2283  034E  2B4C               	goto	l184
  2284  034F                     __end_of_I2CStop:	
  2285                           
  2286                           	psect	text14
  2287  034F                     __ptext14:	
  2288 ;; *************** function _I2CStart *****************
  2289 ;; Defined at:
  2290 ;;		line 50 in file "ADXL_m.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;		None               void
  2297 ;; Registers used:
  2298 ;;		None
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1
  2304 ;;      Params:         0       0       0
  2305 ;;      Locals:         0       0       0
  2306 ;;      Temps:          0       0       0
  2307 ;;      Totals:         0       0       0
  2308 ;;Total ram usage:        0 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    3
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;;		_E_Write
  2316 ;;		_E_Read
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           
  2321                           ;psect for function _I2CStart
  2322  034F                     _I2CStart:	
  2323                           
  2324                           ;ADXL_m.c: 52: SEN = 1;
  2325                           
  2326                           ;incstack = 0
  2327                           ; Regs used in _I2CStart: []
  2328  034F  1683               	bsf	3,5	;RP0=1, select bank1
  2329  0350  1303               	bcf	3,6	;RP1=0, select bank1
  2330  0351  1411               	bsf	17,0	;volatile
  2331  0352                     l178:	
  2332                           ;ADXL_m.c: 53: while(SEN);
  2333                           
  2334  0352  1C11               	btfss	17,0	;volatile
  2335  0353  0008               	return
  2336  0354  2B52               	goto	l178
  2337  0355                     __end_of_I2CStart:	
  2338                           
  2339                           	psect	text15
  2340  0328                     __ptext15:	
  2341 ;; *************** function _I2CSend *****************
  2342 ;; Defined at:
  2343 ;;		line 127 in file "ADXL_m.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  dat             1    wreg     unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  dat             1    0[BANK0 ] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1
  2357 ;;      Params:         0       0       0
  2358 ;;      Locals:         0       1       0
  2359 ;;      Temps:          0       0       0
  2360 ;;      Totals:         0       1       0
  2361 ;;Total ram usage:        1 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    4
  2364 ;; This function calls:
  2365 ;;		_I2CWait
  2366 ;; This function is called by:
  2367 ;;		_main
  2368 ;;		_E_Write
  2369 ;;		_E_Read
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _I2CSend
  2375  0328                     _I2CSend:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  2379                           ;I2CSend@dat stored from wreg
  2380  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2382  032A  00A0               	movwf	I2CSend@dat
  2383                           
  2384                           ;ADXL_m.c: 129: SSPBUF = dat;
  2385  032B  0820               	movf	I2CSend@dat,w
  2386  032C  0093               	movwf	19	;volatile
  2387  032D                     l214:	
  2388                           ;ADXL_m.c: 130: while(BF);
  2389                           
  2390  032D  1683               	bsf	3,5	;RP0=1, select bank1
  2391  032E  1303               	bcf	3,6	;RP1=0, select bank1
  2392  032F  1814               	btfsc	20,0	;volatile
  2393  0330  2B2D               	goto	l214
  2394                           
  2395                           ;ADXL_m.c: 131: I2CWait();
  2396  0331  2333               	fcall	_I2CWait
  2397  0332  0008               	return
  2398  0333                     __end_of_I2CSend:	
  2399                           
  2400                           	psect	text16
  2401  0355                     __ptext16:	
  2402 ;; *************** function _I2CRestart *****************
  2403 ;; Defined at:
  2404 ;;		line 76 in file "ADXL_m.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;		None               void
  2411 ;; Registers used:
  2412 ;;		None
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1
  2418 ;;      Params:         0       0       0
  2419 ;;      Locals:         0       0       0
  2420 ;;      Temps:          0       0       0
  2421 ;;      Totals:         0       0       0
  2422 ;;Total ram usage:        0 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    3
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;;		_E_Read
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           
  2434                           ;psect for function _I2CRestart
  2435  0355                     _I2CRestart:	
  2436                           
  2437                           ;ADXL_m.c: 78: RSEN = 1;
  2438                           
  2439                           ;incstack = 0
  2440                           ; Regs used in _I2CRestart: []
  2441  0355  1683               	bsf	3,5	;RP0=1, select bank1
  2442  0356  1303               	bcf	3,6	;RP1=0, select bank1
  2443  0357  1491               	bsf	17,1	;volatile
  2444  0358                     l190:	
  2445                           ;ADXL_m.c: 79: while(RSEN);
  2446                           
  2447  0358  1C91               	btfss	17,1	;volatile
  2448  0359  0008               	return
  2449  035A  2B58               	goto	l190
  2450  035B                     __end_of_I2CRestart:	
  2451                           
  2452                           	psect	text17
  2453  02E6                     __ptext17:	
  2454 ;; *************** function _I2CRead *****************
  2455 ;; Defined at:
  2456 ;;		line 140 in file "ADXL_m.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  temp            1    1[BANK0 ] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      unsigned char 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1
  2470 ;;      Params:         0       0       0
  2471 ;;      Locals:         0       1       0
  2472 ;;      Temps:          0       1       0
  2473 ;;      Totals:         0       2       0
  2474 ;;Total ram usage:        2 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    4
  2477 ;; This function calls:
  2478 ;;		_I2CWait
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;;		_E_Read
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _I2CRead
  2487  02E6                     _I2CRead:	
  2488                           
  2489                           ;ADXL_m.c: 142: unsigned char temp;
  2490                           ;ADXL_m.c: 144: RCEN = 1;
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  2494  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  2495  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  2496  02E8  1591               	bsf	17,3	;volatile
  2497  02E9                     l220:	
  2498                           ;ADXL_m.c: 145: while(!BF);
  2499                           
  2500  02E9  1C14               	btfss	20,0	;volatile
  2501  02EA  2AE9               	goto	l220
  2502                           
  2503                           ;ADXL_m.c: 146: temp = SSPBUF;
  2504  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2505  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2506  02ED  0813               	movf	19,w	;volatile
  2507  02EE  00A0               	movwf	??_I2CRead
  2508  02EF  0820               	movf	??_I2CRead,w
  2509  02F0  00A1               	movwf	I2CRead@temp
  2510                           
  2511                           ;ADXL_m.c: 147: I2CWait();
  2512  02F1  2333               	fcall	_I2CWait
  2513                           
  2514                           ;ADXL_m.c: 148: return temp;
  2515  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2516  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  2517  02F4  0821               	movf	I2CRead@temp,w
  2518  02F5  0008               	return
  2519  02F6                     __end_of_I2CRead:	
  2520                           
  2521                           	psect	text18
  2522  0333                     __ptext18:	
  2523 ;; *************** function _I2CWait *****************
  2524 ;; Defined at:
  2525 ;;		line 114 in file "ADXL_m.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;		None
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;		None               void
  2532 ;; Registers used:
  2533 ;;		wreg, status,2
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMMON   BANK0   BANK1
  2539 ;;      Params:         0       0       0
  2540 ;;      Locals:         0       0       0
  2541 ;;      Temps:          0       0       0
  2542 ;;      Totals:         0       0       0
  2543 ;;Total ram usage:        0 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    3
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_I2CSend
  2550 ;;		_I2CRead
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _I2CWait
  2556  0333                     _I2CWait:	
  2557  0333                     l1169:	
  2558                           ;ADXL_m.c: 116: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  2559                           
  2560                           ;incstack = 0
  2561                           ; Regs used in _I2CWait: [wreg+status,2]
  2562                           
  2563  0333  1683               	bsf	3,5	;RP0=1, select bank1
  2564  0334  1303               	bcf	3,6	;RP1=0, select bank1
  2565  0335  0811               	movf	17,w	;volatile
  2566  0336  391F               	andlw	31
  2567  0337  1903               	btfsc	3,2
  2568  0338  1914               	btfsc	20,2	;volatile
  2569  0339  2B33               	goto	l1169
  2570  033A  0008               	return
  2571  033B                     __end_of_I2CWait:	
  2572                           
  2573                           	psect	text19
  2574  0342                     __ptext19:	
  2575 ;; *************** function _I2CNak *****************
  2576 ;; Defined at:
  2577 ;;		line 101 in file "ADXL_m.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;		None               void
  2584 ;; Registers used:
  2585 ;;		None
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1
  2591 ;;      Params:         0       0       0
  2592 ;;      Locals:         0       0       0
  2593 ;;      Temps:          0       0       0
  2594 ;;      Totals:         0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    3
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_main
  2602 ;;		_E_Read
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _I2CNak
  2608  0342                     _I2CNak:	
  2609                           
  2610                           ;ADXL_m.c: 103: ACKDT = 1;
  2611                           
  2612                           ;incstack = 0
  2613                           ; Regs used in _I2CNak: []
  2614  0342  1683               	bsf	3,5	;RP0=1, select bank1
  2615  0343  1303               	bcf	3,6	;RP1=0, select bank1
  2616  0344  1691               	bsf	17,5	;volatile
  2617                           
  2618                           ;ADXL_m.c: 104: ACKEN = 1;
  2619  0345  1611               	bsf	17,4	;volatile
  2620  0346                     l202:	
  2621                           ;ADXL_m.c: 105: while(ACKEN);
  2622                           
  2623  0346  1E11               	btfss	17,4	;volatile
  2624  0347  0008               	return
  2625  0348  2B46               	goto	l202
  2626  0349                     __end_of_I2CNak:	
  2627                           
  2628                           	psect	text20
  2629  02BE                     __ptext20:	
  2630 ;; *************** function _UART_vidNewDataReceived *****************
  2631 ;; Defined at:
  2632 ;;		line 31 in file "UART_m.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;		None               void
  2639 ;; Registers used:
  2640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1
  2646 ;;      Params:         0       0       0
  2647 ;;      Locals:         0       0       0
  2648 ;;      Temps:          4       0       0
  2649 ;;      Totals:         4       0       0
  2650 ;;Total ram usage:        4 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    2
  2653 ;; This function calls:
  2654 ;;		_RS845_ManageState
  2655 ;; This function is called by:
  2656 ;;		Interrupt level 1
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _UART_vidNewDataReceived
  2662  02BE                     _UART_vidNewDataReceived:	
  2663                           
  2664                           ;UART_m.c: 33: if(RCIF == 1)
  2665  02BE  1E8C               	btfss	12,5	;volatile
  2666  02BF  2AC8               	goto	i1l119
  2667                           
  2668                           ;UART_m.c: 34: {
  2669                           ;UART_m.c: 35: GIE = 0;
  2670  02C0  138B               	bcf	11,7	;volatile
  2671                           
  2672                           ;UART_m.c: 36: RS845_ManageState();
  2673  02C1  2303               	fcall	_RS845_ManageState
  2674                           
  2675                           ;UART_m.c: 37: GIE = 1;
  2676  02C2  178B               	bsf	11,7	;volatile
  2677                           
  2678                           ;UART_m.c: 38: RCIF = 0;
  2679  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2680  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2681  02C5  128C               	bcf	12,5	;volatile
  2682                           
  2683                           ;UART_m.c: 39: RC0 ^= 1;
  2684  02C6  3001               	movlw	1
  2685  02C7  0687               	xorwf	7,f
  2686  02C8                     i1l119:	
  2687                           ;UART_m.c: 41: else
  2688                           ;UART_m.c: 42: {
  2689                           
  2690                           ;UART_m.c: 40: }
  2691                           
  2692  02C8  0879               	movf	??_UART_vidNewDataReceived+3,w
  2693  02C9  00FF               	movwf	127
  2694  02CA  0878               	movf	??_UART_vidNewDataReceived+2,w
  2695  02CB  008A               	movwf	10
  2696  02CC  0877               	movf	??_UART_vidNewDataReceived+1,w
  2697  02CD  0084               	movwf	4
  2698  02CE  0E76               	swapf	??_UART_vidNewDataReceived^(0+-128),w
  2699  02CF  0083               	movwf	3
  2700  02D0  0EFE               	swapf	126,f
  2701  02D1  0E7E               	swapf	126,w
  2702  02D2  0009               	retfie
  2703  02D3                     __end_of_UART_vidNewDataReceived:	
  2704                           
  2705                           	psect	intentry
  2706  0004                     __pintentry:	
  2707                           ;incstack = 0
  2708                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2709                           
  2710  0004                     interrupt_function:	
  2711  007E                     saved_w	set	btemp
  2712  0004  00FE               	movwf	btemp
  2713  0005  0E03               	swapf	3,w
  2714  0006  00F6               	movwf	??_UART_vidNewDataReceived
  2715  0007  0804               	movf	4,w
  2716  0008  00F7               	movwf	??_UART_vidNewDataReceived+1
  2717  0009  080A               	movf	10,w
  2718  000A  00F8               	movwf	??_UART_vidNewDataReceived+2
  2719  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2720  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2721  000D  087F               	movf	btemp+1,w
  2722  000E  00F9               	movwf	??_UART_vidNewDataReceived+3
  2723  000F  2ABE               	ljmp	_UART_vidNewDataReceived
  2724                           
  2725                           	psect	text21
  2726  0303                     __ptext21:	
  2727 ;; *************** function _RS845_ManageState *****************
  2728 ;; Defined at:
  2729 ;;		line 47 in file "UART_m.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;		None               void
  2736 ;; Registers used:
  2737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1
  2743 ;;      Params:         0       0       0
  2744 ;;      Locals:         0       0       0
  2745 ;;      Temps:          0       0       0
  2746 ;;      Totals:         0       0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    1
  2750 ;; This function calls:
  2751 ;;		_UART_vidSend
  2752 ;; This function is called by:
  2753 ;;		_UART_vidNewDataReceived
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _RS845_ManageState
  2759  0303                     _RS845_ManageState:	
  2760                           
  2761                           ;UART_m.c: 49: if(RCREG == (unsigned char)ECU_ID)
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2765  0303  1283               	bcf	3,5	;RP0=0, select bank0
  2766  0304  1303               	bcf	3,6	;RP1=0, select bank0
  2767  0305  081A               	movf	26,w	;volatile
  2768  0306  067A               	xorwf	_ECU_ID,w
  2769  0307  1D03               	skipz
  2770  0308  0008               	return
  2771                           
  2772                           ;UART_m.c: 50: {
  2773                           ;UART_m.c: 51: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)9));
  2774  0309  3009               	movlw	9
  2775  030A  00F0               	movwf	UART_vidSend@Len
  2776  030B  3000               	movlw	0
  2777  030C  00F1               	movwf	UART_vidSend@Len+1
  2778  030D  305B               	movlw	_Data_Buffer& (0+255)
  2779  030E  2262               	fcall	_UART_vidSend
  2780                           
  2781                           ;UART_m.c: 52: }
  2782  030F  0008               	return
  2783  0310                     __end_of_RS845_ManageState:	
  2784                           ;UART_m.c: 53: else
  2785                           ;UART_m.c: 54: {
  2786                           
  2787                           
  2788                           	psect	text22
  2789  0262                     __ptext22:	
  2790 ;; *************** function _UART_vidSend *****************
  2791 ;; Defined at:
  2792 ;;		line 58 in file "UART_m.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  data            1    wreg     const PTR unsigned char 
  2795 ;;		 -> Data_Buffer(9), 
  2796 ;;  Len             2    0[COMMON] const unsigned short 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  data            1    3[COMMON] const PTR unsigned char 
  2799 ;;		 -> Data_Buffer(9), 
  2800 ;;  UART_u16Inde    2    4[COMMON] unsigned short 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;		None               void
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1
  2810 ;;      Params:         2       0       0
  2811 ;;      Locals:         3       0       0
  2812 ;;      Temps:          1       0       0
  2813 ;;      Totals:         6       0       0
  2814 ;;Total ram usage:        6 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_RS845_ManageState
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _UART_vidSend
  2825  0262                     _UART_vidSend:	
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  2829                           ;UART_vidSend@data stored from wreg
  2830  0262  00F3               	movwf	UART_vidSend@data
  2831                           
  2832                           ;UART_m.c: 60: unsigned short UART_u16Index = 0;
  2833  0263  01F4               	clrf	UART_vidSend@UART_u16Index
  2834  0264  01F5               	clrf	UART_vidSend@UART_u16Index+1
  2835                           
  2836                           ;UART_m.c: 62: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  2837  0265  01F4               	clrf	UART_vidSend@UART_u16Index
  2838  0266  01F5               	clrf	UART_vidSend@UART_u16Index+1
  2839  0267  0871               	movf	UART_vidSend@Len+1,w
  2840  0268  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  2841  0269  1D03               	skipz
  2842  026A  2A6D               	goto	u44_25
  2843  026B  0870               	movf	UART_vidSend@Len,w
  2844  026C  0274               	subwf	UART_vidSend@UART_u16Index,w
  2845  026D                     u44_25:	
  2846  026D  1803               	btfsc	3,0
  2847  026E  2A89               	goto	i1l128
  2848  026F                     i1l129:	
  2849                           ;UART_m.c: 63: {
  2850                           ;UART_m.c: 64: while(PIR1bits.TXIF == 0);
  2851                           
  2852  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2853  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0271  1E0C               	btfss	12,4	;volatile
  2855  0272  2A6F               	goto	i1l129
  2856                           
  2857                           ;UART_m.c: 65: TXREG = data[UART_u16Index];
  2858  0273  0874               	movf	UART_vidSend@UART_u16Index,w
  2859  0274  0773               	addwf	UART_vidSend@data,w
  2860  0275  00F2               	movwf	??_UART_vidSend
  2861  0276  0872               	movf	??_UART_vidSend,w
  2862  0277  0084               	movwf	4
  2863  0278  1383               	bcf	3,7	;select IRP bank0
  2864  0279  0800               	movf	0,w
  2865  027A  0099               	movwf	25	;volatile
  2866  027B  3001               	movlw	1
  2867  027C  07F4               	addwf	UART_vidSend@UART_u16Index,f
  2868  027D  1803               	skipnc
  2869  027E  0AF5               	incf	UART_vidSend@UART_u16Index+1,f
  2870  027F  3000               	movlw	0
  2871  0280  07F5               	addwf	UART_vidSend@UART_u16Index+1,f
  2872  0281  0871               	movf	UART_vidSend@Len+1,w
  2873  0282  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  2874  0283  1D03               	skipz
  2875  0284  2A87               	goto	u46_25
  2876  0285  0870               	movf	UART_vidSend@Len,w
  2877  0286  0274               	subwf	UART_vidSend@UART_u16Index,w
  2878  0287                     u46_25:	
  2879  0287  1C03               	skipc
  2880  0288  2A6F               	goto	i1l129
  2881  0289                     i1l128:	
  2882                           
  2883                           ;UART_m.c: 66: }
  2884                           ;UART_m.c: 67: PIR1bits.TXIF = 0;
  2885  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2886  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2887  028B  120C               	bcf	12,4	;volatile
  2888  028C  0008               	return
  2889  028D                     __end_of_UART_vidSend:	
  2890  007E                     btemp	set	126	;btemp
  2891  007E                     wtemp	set	126
  2892  007E                     wtemp0	set	126
  2893  0080                     wtemp1	set	128
  2894  0082                     wtemp2	set	130
  2895  0084                     wtemp3	set	132
  2896  0086                     wtemp4	set	134
  2897  0088                     wtemp5	set	136
  2898  007F                     wtemp6	set	127
  2899  007E                     ttemp	set	126
  2900  007E                     ttemp0	set	126
  2901  0081                     ttemp1	set	129
  2902  0084                     ttemp2	set	132
  2903  0087                     ttemp3	set	135
  2904  007F                     ttemp4	set	127
  2905  007E                     ltemp	set	126
  2906  007E                     ltemp0	set	126
  2907  0082                     ltemp1	set	130
  2908  0086                     ltemp2	set	134
  2909  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     59      68
    BANK1            32      0       0

Pointer List with Targets:

    UART_vidSend@data	const PTR unsigned char  size(1) Largest target is 9
		 -> Data_Buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _RS845_ManageState->_UART_vidSend

Critical Paths under _main in BANK0

    _main->_E_Read
    _main->_ini_adxl345
    _ini_adxl345->_E_Write
    _E_Write->_I2CSend
    _E_Read->_I2CRead

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                67    67      0    1599
                                              6 BANK0     53    53      0
                             _E_Read
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                         _UART_Write
                       _UART_vidInit
                      _get_x_average
                      _get_y_average
                      _get_z_average
                        _ini_adxl345
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ini_adxl345                                          2     2      0     578
                                              4 BANK0      2     2      0
                            _E_Write
 ---------------------------------------------------------------------------------
 (2) _E_Write                                              3     0      3     578
                                              1 BANK0      3     0      3
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (1) _get_z_average                                        4     0      4      86
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _get_y_average                                        4     0      4      86
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _get_x_average                                        4     0      4      86
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0       0
                                              0 BANK0      1     1      0
                   _UART_u8GetNodeID
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _E_Read                                               4     2      2     282
                                              2 BANK0      4     2      2
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (3) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CSend                                              1     1      0      22
                                              0 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      23
                                              0 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (4) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_vidNewDataReceived                              4     4      0     237
                                              6 COMMON     4     4      0
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (6) _RS845_ManageState                                    0     0      0     237
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (7) _UART_vidSend                                         6     4      2     237
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _E_Read
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_Write
   _UART_vidInit
     _UART_u8GetNodeID
   _get_x_average
   _get_y_average
   _get_z_average
   _ini_adxl345
     _E_Write
       _I2CSend
         _I2CWait
       _I2CStart
       _I2CStop
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _RS845_ManageState
     _UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     3B      44       4       85.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0      50       7        0.0%
DATA                 0      0      50       8        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Sun Aug 30 03:50:35 2020

       ??_UART_vidNewDataReceived 0076                       __CFG_CP$OFF 0000                                _BF 04A0  
                              l49 031F               __size_of_I2CRestart 0006                    ?_get_x_average 0020  
             __end_of_system_init 031C                               l202 0346                               l220 02E9  
                             l214 032D                               l190 0358                               l184 034C  
                             l178 0352                               l196 033F                    ?_get_y_average 0020  
                             l979 006A                               _GIE 005F                               _RC0 0038  
                             u305 0135                               u325 016A                               _PEN 048A  
                             u345 01C5                      __CFG_CPD$OFF 0000                               u355 01DE  
                             u365 01F7                               u285 0100                               u517 0038  
                             u527 0054                               u537 0225                               u547 023B  
                             _SEN 0488                               u557 0251                    ?_get_z_average 0020  
                 __end_of_I2CInit 02E6                   __end_of_I2CRead 02F6                   __end_of_I2CSend 0333  
                             fsr0 0004                   __end_of_I2CWait 033B                               indf 0000  
                 __end_of_I2CStop 034F                      __CFG_FOSC$HS 0000                      __CFG_LVP$OFF 0000  
                     main@bw_rate 004D                              l1169 0333                              _BRGH 04C2  
                            _CREN 00C4                      ?_ini_adxl345 0070                              _PEIE 005E  
                            _RCIE 0465                              _RCEN 048B                              _RCIF 0065  
                            _SPEN 00C7                              _RSEN 0489                              _TRMT 04C1  
                            _TXEN 04C5                              _SYNC 04C4                      __CFG_WRT$OFF 0000  
                    main@Xaverage 002E                      main@Yaverage 002F                              _main 001D  
                    main@Zaverage 0030                              btemp 007E                  __end_of_I2CStart 0355  
                 __end_of_E_Write 0303                              ltemp 007E                              start 0010  
                            ttemp 007E                              wtemp 007E                     __CFG_IESO$OFF 0000  
                     _Data_Buffer 005B                             ?_main 0070                             _ACKEN 048C  
                           _ACKDT 048D                     __CFG_WDTE$OFF 0000                             _ANSEL 0188  
                           i1l119 02C8                             i1l128 0289                             i1l129 026F  
                           _RCREG 001A                             _SPBRG 0099                             u44_25 026D  
                           u46_25 0287                             _TRISA 0085                             _TXREG 0019  
                  __CFG_FCMEN$OFF 0000                       ?_UART_Write 0070                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
                  __CFG_MCLRE$OFF 0000                   __initialization 0011                       _system_init 0310  
                    __end_of_main 0214                   ??_get_x_average 0024                         ??_I2CInit 0020  
                       ??_I2CRead 0020                         ??_I2CSend 0020                         ??_I2CWait 0020  
                       ??_I2CStop 0020                   ??_get_y_average 0024                   ??_get_z_average 0024  
                          ??_main 0026                            _ADCON0 001F                            _I2CAck 033B  
                          _I2CNak 0342                         ??_E_Write 0024                            _ECU_ID 007A  
                    ??_I2CRestart 0020                            _E_Read 02A8                            _SSPADD 0093  
                          _TRISC0 0438                            _TRISC6 043E                            _TRISC7 043F  
                          _SSPCON 0014                            _SSPBUF 0013                    __CFG_PWRTE$OFF 0000  
             __size_of_UART_Write 000C                            main@id 0049                __end_of_I2CRestart 035B  
                       ?_I2CStart 0070                            saved_w 007E           __end_of__initialization 001B  
            __size_of_ini_adxl345 004E                 ?_UART_u8GetNodeID 0070                    __pcstackCOMMON 0070  
              ??_UART_u8GetNodeID 0020                        ??_I2CStart 0020                           ?_I2CAck 0070  
                         ?_I2CNak 0070                        __pbssBANK0 005B                           ?_E_Read 0022  
                      __pnvCOMMON 007A                   main@Xaccumulate 004F                        I2CSend@dat 0020  
                      __pmaintext 001D                        __pintentry 0004                   main@Yaccumulate 0053  
                         _I2CInit 02D3                           _I2CRead 02E6                           _I2CSend 0328  
                         _I2CWait 0333                           _I2CStop 0349                   UART_vidSend@Len 0070  
                  get_x_average@x 0020                   main@Zaccumulate 0057                      ??_UART_Write 0020  
                         _SSPCON2 0091                   __size_of_I2CAck 0007                   __size_of_I2CNak 0007  
                         _SSPSTAT 0094                    get_y_average@y 0020                           _E_Write 02F6  
                 __size_of_E_Read 0016          ?_UART_vidNewDataReceived 0070                    get_z_average@z 0020  
                       E_Write@ch 0023                      ?_system_init 0070                __end_of_UART_Write 0328  
                         __ptext1 0310                           __ptext2 0214                           __ptext3 02F6  
                         __ptext4 035D                           __ptext5 035E                           __ptext6 035F  
                         __ptext7 028D                           __ptext8 035B                           __ptext9 031C  
                   ?_UART_vidInit 0070                     ?_UART_vidSend 0070                           main@pow 004B  
                         main@xhi 0031                           main@yhi 0039                           main@zhi 0041  
                         main@xlo 0035                           main@ylo 003D                           main@zlo 0045  
            end_of_initialization 001B                   _RECEIVED_ECU_ID 007B             __end_of_get_x_average 0360  
                  ??_UART_vidInit 0020                    ??_UART_vidSend 0072             __end_of_get_y_average 035F  
                  UART_Write@data 0020             __end_of_get_z_average 035E                         _TRISCbits 0087  
               __size_of_I2CStart 0006   __end_of_UART_vidNewDataReceived 02D3                    __end_of_I2CAck 0342  
                  __end_of_I2CNak 0349                    __end_of_E_Read 02BE               start_initialization 0011  
       __size_of_UART_u8GetNodeID 0002                          ??_I2CAck 0020                          ??_I2CNak 0020  
                   ??_ini_adxl345 0024                          ??_E_Read 0024                       E_Write@addr 0021  
            __size_of_system_init 000C                          ?_I2CInit 0070                          ?_I2CRead 0070  
                        ?_I2CSend 0070                          ?_I2CWait 0070                          ?_I2CStop 0070  
       UART_vidSend@UART_u16Index 0074                       __pbssCOMMON 007B                         ___latbits 0000  
                   __pcstackBANK0 0020                          ?_E_Write 0021                       I2CRead@temp 0021  
            __end_of_UART_vidInit 02A8              __end_of_UART_vidSend 028D                 _RS845_ManageState 0303  
             __end_of_ini_adxl345 0262                ?_RS845_ManageState 0070               ??_RS845_ManageState 0076  
                        E_Read@ch 0025  __size_of_UART_vidNewDataReceived 0015                          _I2CStart 034F  
                UART_vidSend@data 0073         __end_of_RS845_ManageState 0310                 interrupt_function 0004  
                      E_Read@addr 0022                          _PIR1bits 000C                          _PIR2bits 000D  
                __size_of_I2CInit 0013                  __size_of_I2CRead 0010                  __size_of_I2CSend 000B  
                __size_of_I2CWait 0008                  __size_of_I2CStop 0006                  _UART_u8GetNodeID 035B  
                      _I2CRestart 0355                       _ini_adxl345 0214                  __size_of_E_Write 000D  
                        __ptext10 02D3                          __ptext11 033B                          __ptext20 02BE  
                        __ptext12 02A8                          __ptext21 0303                          __ptext13 0349  
                        __ptext22 0262                          __ptext14 034F                          __ptext15 0328  
                        __ptext16 0355                          __ptext17 02E6                          __ptext18 0333  
                        __ptext19 0342                 __CFG_BOR4V$BOR40V 0000             __size_of_UART_vidInit 001B  
           __size_of_UART_vidSend 002B        __size_of_RS845_ManageState 000D                     __size_of_main 01F7  
          __size_of_get_x_average 0001            __size_of_get_y_average 0001            __size_of_get_z_average 0001  
         _UART_vidNewDataReceived 02BE                      _UART_vidInit 028D                      _UART_vidSend 0262  
                     ?_I2CRestart 0070                          intlevel1 0000                     ??_system_init 0020  
                   _get_x_average 035F                     _get_y_average 035E                     _get_z_average 035D  
                      _UART_Write 031C          __end_of_UART_u8GetNodeID 035D  
